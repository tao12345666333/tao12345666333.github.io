<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[MoeLove]]></title>
  <subtitle><![CDATA[不忘初心]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://moelove.info/"/>
  <updated>2015-12-11T14:03:25.375Z</updated>
  <id>http://moelove.info/</id>
  
  <author>
    <name><![CDATA[TaoBeier]]></name>
    <email><![CDATA[zhangjintao9020@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JSLint,JSHint,ESLint对比和Vim配置]]></title>
    <link href="http://moelove.info/2015/11/28/JSLint-JSHint-ESLint%E5%AF%B9%E6%AF%94%E5%92%8CVim%E9%85%8D%E7%BD%AE/"/>
    <id>http://moelove.info/2015/11/28/JSLint-JSHint-ESLint对比和Vim配置/</id>
    <published>2015-11-28T15:43:49.000Z</published>
    <updated>2015-12-03T15:55:08.000Z</updated>
    <content type="html"><![CDATA[<p>最近在用<code>React</code>写项目，但是<a href="https://github.com/tao12345666333/vim" target="_blank" rel="external">我的Vim配置</a>之前并没有配置对<code>JSX</code>和<code>ES6</code>的支持，然后看着那堆报错各种不爽了，于是还是要继续折腾，顺便也增加了点知识，记录一下。</p>
<h1 id="主流的JS_Lint工具及介绍">主流的JS Lint工具及介绍</h1>
<p><a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="external">JavaScript</a>已经发展蛮长时间了，对应的Lint工具也是层出不穷，下面介绍一下比较主流的几个Lint工具(其实是我用过的几个XD)</p>
<h2 id="JSLint">JSLint</h2>
<p><a href="https://en.wikipedia.org/wiki/JSLint" target="_blank" rel="external">JSLint</a>是由<a href="https://en.wikipedia.org/wiki/Douglas_Crockford" target="_blank" rel="external">Douglas Crockford</a>开发的，可能是最早的JavaScript Lint工具了吧，它的名字来源于著名的<code>C</code>语言工具<code>Lint</code>。老道把他认为的非<code>Good Parts</code>的部分都报了warning，而且在它的<a href="http://www.jslint.com/help.html" target="_blank" rel="external">文档</a>中也提到了你应该欣然接受所有的<code>JSLint</code>的建议。最近看了下，老道还在持续更新着<a href="https://github.com/douglascrockford/JSLint" target="_blank" rel="external">这个项目</a>，而且<a href="http://www.jslint.com/" target="_blank" rel="external">官网</a>上也有着一个在线的体验工具，可以尝试一下。对了，如果想要使用这个工具，建议看看老道在<a href="https://www.youtube.com/watch?v=taaEzHI9xyY" target="_blank" rel="external">YouTube</a>上关于JavaScript编程风格的视频，讲的还是很幽默的。</p>
<h2 id="JSHint">JSHint</h2>
<p><a href="https://en.wikipedia.org/wiki/JSHint" target="_blank" rel="external">JSHint</a>是由<a href="http://anton.kovalyov.net/" target="_blank" rel="external">Anton Kovalyov</a><strong>基于</strong><code>JSLint</code>的代码实现的开源项目，由于JSLint时期大多数人都在受JSLint压迫，JSHint相比较之下，更友好，也更容易配置，所以很快就发展了起来，也得到了众多IDE和编辑器的<a href="http://jshint.com/install/" target="_blank" rel="external">支持</a>。但是，由于它是基于JSLint开发的，自然原有的一些问题它也继承下来了，比如不易扩展，不容易直接根据报错定位到具体的规则配置等，虽然之前好像是有过相关的讨论，但是现在仍然没有什么好的解决办法。好在它发展的不错，很多时候遇到的问题都可以在网上找到相关的解决方案，而且文档也是非常不错的。</p>
<h2 id="ESLint">ESLint</h2>
<p><a href="http://eslint.org/" target="_blank" rel="external">ESLint</a>是由<a href="https://www.nczonline.net/" target="_blank" rel="external">Nicholas C. Zakas</a>在2013年开始开发的，它的初衷就是为了能让开发者能自定义自己的<code>linting rules</code>，而且它提供了一套相当完善的插件机制，可以自由的扩展，动态加载配置规则，同时可以方便的根据报错定位到具体的规则配置。而且我比较喜欢它的一点是<a href="http://eslint.org/docs/user-guide/configuring" target="_blank" rel="external">文档</a>非常详细，可能这也是灵活所必须的吧。在这里还要提一点，<code>ESLint</code>最初并不是为了造一个重复的轮子，而是作者在实际使用中的需求<a href="https://github.com/eslint/eslint#why-dont-you-like-jshint" target="_blank" rel="external">没有能得到JSHint团队的回应</a>，所以他就结合当时的<code>JSHint</code>和另一个代码风格的检查工具<code>JSCS</code>写出来了现在具备<strong>代码风格检查</strong>，<strong>自定义插件扩展</strong>功能的<code>ESLint</code>了。</p>
<h1 id="JSLint，JSHint和ESLint的对比">JSLint，JSHint和ESLint的对比</h1>
<p>这三个工具各有特色，我只是做一下对比，选择的话，看个人需求就好了。</p>
<h2 id="JSLint-1">JSLint</h2>
<h3 id="优点">优点</h3>
<ul>
<li>配置是老道已经定好的，开箱即用。</li>
</ul>
<h3 id="不足">不足</h3>
<ul>
<li>有限的配置选项，很多规则不能禁用</li>
<li>规范严格，凡是不符合老道所认为的好的风格的，都会有警告(这一项就看你是否完全认同老道了)</li>
<li>扩展性差</li>
<li>无法根据错误定位到对应的规则 </li>
</ul>
<h2 id="JSHint-1">JSHint</h2>
<h3 id="优点-1">优点</h3>
<ul>
<li>有了很多参数可以配置</li>
<li>支持配置文件，方便使用</li>
<li>支持了一些常用类库</li>
<li>支持了基本的<code>ES6</code></li>
</ul>
<h3 id="不足-1">不足</h3>
<ul>
<li>不支持自定义规则</li>
<li>无法根据错误定位到对应的规则 </li>
</ul>
<h2 id="ESLint-1">ESLint</h2>
<h3 id="优点-2">优点</h3>
<ul>
<li>默认规则里面包含了<code>JSLint</code>和<code>JSHint</code>的规则，易于迁移(这肯定是故意的XD)</li>
<li>可配置为<code>警告</code>和<code>错误</code>两个等级，或者直接禁用掉</li>
<li>支持插件扩展</li>
<li>可以自定义规则</li>
<li>可以根据错误定位到对应的规则</li>
<li>支持<code>ES6</code></li>
<li>唯一一个支持<code>JSX</code>的工具</li>
</ul>
<h3 id="不足-2">不足</h3>
<ul>
<li>需要进行一些自定义配置(因为太灵活了嘛，不过文档是很详细的)</li>
<li><strong>慢</strong> (它比其他两个都要慢)</li>
</ul>
<h1 id="Vim支持">Vim支持</h1>
<p>我们都使用<a href="https://github.com/scrooloose/syntastic" target="_blank" rel="external"><code>Syntastic</code></a>来配置</p>
<h2 id="JSLint的Vim配置">JSLint的Vim配置</h2>
<p>有一个<a href="https://github.com/hallettj/jslint.vim" target="_blank" rel="external">jslint.vim</a>当然版本太老了。。我们不用这种方式做。</p>
<ul>
<li>安装<code>jslint</code> </li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> npm install jslint -g</div></pre></td></tr></table></figure>

<ul>
<li>在<code>vimrc</code>中添加如下配置</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_javascript_checkers</span> = [<span class="string">'jslint'</span>]</div></pre></td></tr></table></figure>

<h2 id="JSHint的Vim配置">JSHint的Vim配置</h2>
<ul>
<li>安装<code>jshint</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> npm install jshint -g</div></pre></td></tr></table></figure>

<ul>
<li>在<code>vimrc</code>中添加如下配置</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_javascript_checkers</span> = [<span class="string">'jshint'</span>]</div></pre></td></tr></table></figure>

<ul>
<li>也可以使用独立插件<a href="https://github.com/wookiehangover/jshint.vim" target="_blank" rel="external">jshint.vim</a></li>
</ul>
<h2 id="ESLint的Vim配置">ESLint的Vim配置</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> npm install eslint -g</div></pre></td></tr></table></figure>

<ul>
<li>在<code>vimrc</code>中添加如下配置</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_javascript_checkers</span> = [<span class="string">'eslint'</span>]</div></pre></td></tr></table></figure>

<p><strong>这里有个很重要的问题，记得要在添加一份配置文件，在官网或者在我vim配置的仓库可以找到</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在用<code>React</code>写项目，但是<a href="https://github.com/tao12345666333/vim" target="_blank" rel="external">我的Vim配置</a>之前并没有配置对<code>JSX</]]>
    </summary>
    
      <category term="VIM" scheme="http://moelove.info/tags/VIM/"/>
    
      <category term="React" scheme="http://moelove.info/tags/React/"/>
    
      <category term="Web" scheme="http://moelove.info/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用正确的姿势开源Python项目]]></title>
    <link href="http://moelove.info/2015/10/26/%E7%94%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%BC%80%E6%BA%90Python%E9%A1%B9%E7%9B%AE/"/>
    <id>http://moelove.info/2015/10/26/用正确的姿势开源Python项目/</id>
    <published>2015-10-26T14:17:36.000Z</published>
    <updated>2015-11-22T15:32:13.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>做个备忘，也希望可以帮到别人。</p>
</blockquote>
<h2 id="目录结构（初始化）">目录结构（初始化）</h2>
<p>一般我们都会选择在项目的顶层包含较基础的文件，比如<code>setup.py</code>，<code>requirements</code>，<code>README</code>等文件。<br>一般情况下，一个预发布的Python项目中应该包含以下几类文件：</p>
<ul>
<li>projects (项目的主体文件)</li>
<li>setup.py</li>
<li>requirements</li>
<li>Readme (项目说明)</li>
<li>docs (项目文档)</li>
<li>test</li>
</ul>
<p>其中，<code>projects</code>文件夹要以项目命名，存放实际的Python Package.<br>这里放一个<a href="https://github.com/tao12345666333/httpmultipart" target="_blank" rel="external">我的项目的目录</a>作为例子。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">➜  httpmultipart gi<span class="variable">t:</span>(master) tree -L <span class="number">2</span></div><div class="line">.</div><div class="line">├── build</div><div class="line">│   ├── bdist.linux-x86_64</div><div class="line">│   └── lib.linux-x86_64-<span class="number">2.7</span></div><div class="line">├── dist</div><div class="line">│   ├── httpmultipart-<span class="number">0.1</span>.<span class="number">0</span>-py2.<span class="keyword">py3</span>-none-any.whl</div><div class="line">│   └── httpmultipart-<span class="number">0.1</span>.<span class="number">0</span>.tar.gz</div><div class="line">├── docs</div><div class="line">│   ├── _build</div><div class="line">│   ├── <span class="keyword">conf</span>.<span class="keyword">py</span></div><div class="line">│   ├── <span class="built_in">index</span>.rst</div><div class="line">│   ├── Makefile</div><div class="line">│   ├── userguide</div><div class="line">│   └── userguide.rst</div><div class="line">├── env</div><div class="line">│   ├── bin</div><div class="line">│   ├── include</div><div class="line">│   ├── lib</div><div class="line">│   └── local</div><div class="line">├── httpmultipart</div><div class="line">│   ├── __init__.<span class="keyword">py</span></div><div class="line">│   ├── __init__.pyc</div><div class="line">│   ├── main.<span class="keyword">py</span></div><div class="line">│   └── main.pyc</div><div class="line">├── httpmultipart.egg-info</div><div class="line">│   ├── dependency_links.txt</div><div class="line">│   ├── not-zip-safe</div><div class="line">│   ├── PKG-INFO</div><div class="line">│   ├── SOURCES.txt</div><div class="line">│   └── top_level.txt</div><div class="line">├── LICENSE</div><div class="line">├── MANIFEST.in</div><div class="line">├── README.rst</div><div class="line">├── setup.cfg</div><div class="line">├── setup.<span class="keyword">py</span></div><div class="line">└── test_httpmultipart.<span class="keyword">py</span></div><div class="line"></div><div class="line"><span class="number">14</span> directories, <span class="number">21</span> <span class="keyword">files</span></div></pre></td></tr></table></figure>

<p>这个目录中包含了我的<code>virtual enviroment</code> 和打包构建时候生成的文件夹。<br>这些东西在下面会提到。</p>
<h2 id="文档">文档</h2>
<p>文档的话，并没有严格要求必须使用什么样的工具进行构建，也没有很严格的格式要求。不过我推荐使用<a href="http://sphinx-doc.org/" target="_blank" rel="external"><code>SPHINX</code></a>,它是用Python写的工具，使用了一种叫做<code>reStructuredText</code>的语法编辑，可以对多个文本文件重编，可以输出成HTML或者PDF等格式。</p>
<p>这里稍微介绍下使用：</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight Bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install sphinx</div></pre></td></tr></table></figure>

<ul>
<li>初始化</li>
</ul>
<figure class="highlight Bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> docs</div><div class="line">$ sphinx-quickstart</div><div class="line">...<span class="comment">#(这里有一系列的提问，进行初始化)</span></div></pre></td></tr></table></figure>

<ul>
<li>编译</li>
</ul>
<figure class="highlight Bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make html <span class="comment">#(如果按照默认配置生成的Makefile的话，这样就可以编译出html了)</span></div></pre></td></tr></table></figure>

<p>Sphinx的使用还有很多值得说的地方，推荐两个资料：</p>
<ul>
<li>英文的<a href="http://sphinx-doc.org/contents.html" target="_blank" rel="external">Sphinx 的官方文档</a></li>
<li>中文的<a href="http://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-Python%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%97%A5%E6%9C%ACBePROUD%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/dp/B00KGQ4NRO/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1448116359&amp;sr=1-1&amp;keywords=python+%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98" target="_blank" rel="external">Python 开发实战</a></li>
</ul>
<p>官方文档写的非常详细，那本书偏向于实战，是很不错的书。<br>还有很关键的一点是Sphinx有<code>autodoc</code>和<code>automodule</code>的扩展，<br>可以从代码中提取出文档，与代码直接进行关联。提供一个<a href="https://tornado-zh.readthedocs.org/zh/latest/ioloop.html#running-an-ioloop" target="_blank" rel="external">例子</a>可以方便的在文档和源码中进行跳转。</p>
<h2 id="Read_the_Docs_持续文档集成">Read the Docs 持续文档集成</h2>
<p>说完写文档就不得不提到<a href="https://readthedocs.org/" target="_blank" rel="external"><code>Read the Dosc</code></a>了,这是一个第三方的文档托管平台,使用<code>Django</code>开发，它可以很轻松的和Github上的项目进行集成，在每次代码提交的时候会自动进行文档构建，我们可以看看<a href="https://tornado-zh.readthedocs.org/" target="_blank" rel="external">生成文档的效果</a>。现在有很多开源项目的文档都是托管在这里的，具体的配置可以参考<a href="https://read-the-docs.readthedocs.org/en/latest/getting_started.html" target="_blank" rel="external">官方文档</a>。</p>
<h2 id="TravisCI_持续集成">TravisCI 持续集成</h2>
<p><a href="https://travis-ci.org/" target="_blank" rel="external"><code>Travisci</code></a>可以与Github非常好的结合，可以手动导入<code>repo</code>，并设置<code>Webhooks &amp; services</code>,在每次提交的时候都会测试运行来发现是否存在异常。在使用之前，我们需要先做一些初始化的操作：</p>
<ul>
<li><p>创建<code>.travis.yml</code>文件</p>
<p>  我们需要告诉它一些基本的信息：</p>
<ul>
<li>我们项目使用的语言</li>
<li>项目使用的语言版本</li>
<li>环境的依赖</li>
<li>是否需要<code>sudo</code>权限运行</li>
<li>使用什么命令来安装</li>
<li><p>使用什么命令运行测试</p>
<p>下面提供一个例子：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight YML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">language: python</div><div class="line">python:</div><div class="line">    -<span class="ruby"> <span class="number">2.7</span></span></div><div class="line"></div><div class="line">env:</div><div class="line">    -<span class="ruby"> <span class="constant">DEPS</span>=<span class="keyword">true</span></span></div><div class="line">    -<span class="ruby"> <span class="constant">DEPS</span>=<span class="keyword">false</span></span></div><div class="line"></div><div class="line">sudo: false</div><div class="line"></div><div class="line">install:</div><div class="line">    -<span class="ruby"> travis_retry python setup.py install</span></div><div class="line">    -<span class="ruby"> travis_retry pip install coveralls</span></div><div class="line">    -<span class="ruby"> coverage run test_httpmultipart.py</span></div><div class="line">    -<span class="ruby"> coverage report</span></div><div class="line"></div><div class="line">script:</div><div class="line">    -<span class="ruby"> python test_httpmultipart.py</span></div><div class="line"></div><div class="line">after_success:</div><div class="line">    coveralls</div></pre></td></tr></table></figure>

<p>PS： 在<code>install</code>这一项配置中要注意，如果项目存在依赖，一定要进行安装，还有<code>Travisci</code>提供了多项配置，包括出错重试等，具体配置可以参考<a href="http://docs.travis-ci.com/" target="_blank" rel="external">官方文档</a>，要特别注意<code>travis_retry</code>等命令的使用，非常容易出现坑。</p>
<h2 id="测试">测试</h2>
<p>Python有内置的<code>unittest</code>测试库，支持断言;当然还有其他的一些测试框架，看个人喜好和项目需求。在项目中应该包含测试文件或者测试目录，测试文件一般以<code>test_projects_name.py</code>命名。我选择使用<code>coverage</code>作为测试覆盖率的检查，下面是一个运行示例：</p>
<figure class="highlight Bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  httpmultipart git:(master) coverage run test_httpmultipart.py </div><div class="line">....</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran <span class="number">4</span> tests <span class="keyword">in</span> <span class="number">36.125</span>s</div><div class="line"></div><div class="line">OK</div><div class="line"></div><div class="line"></div><div class="line">➜  httpmultipart git:(master) coverage report</div><div class="line">Name                        Stmts   Miss Branch BrPart  Cover</div><div class="line">-------------------------------------------------------------</div><div class="line">httpmultipart/__init__.py      <span class="number">10</span>      <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span>   <span class="number">100</span>%</div><div class="line">httpmultipart/main.py          <span class="number">37</span>      <span class="number">0</span>      <span class="number">4</span>      <span class="number">0</span>   <span class="number">100</span>%</div><div class="line">-------------------------------------------------------------</div><div class="line">TOTAL                          <span class="number">47</span>      <span class="number">0</span>      <span class="number">4</span>      <span class="number">0</span>   <span class="number">100</span>%</div></pre></td></tr></table></figure>

<h2 id="Coveralls_测试覆盖率检查">Coveralls 测试覆盖率检查</h2>
<p><a href="https://coveralls.io" target="_blank" rel="external">Coveralls</a>可以很友好的支持Github和Bitbucket仓库的导入，同时也可以很好的和<code>Travisci</code>集成，在上面我们的<code>.travis.yml</code>文件中，在最后一项<code>after_success</code>中，我们就配置了对<code>Coveralls</code>的支持。</p>
<h2 id="发布包到PyPI">发布包到PyPI</h2>
<p><a href="https://pypi.python.org/pypi" target="_blank" rel="external">PyPI - the Python Package Index</a><br>是Python的包仓库，它允许我们将自己写的包上传上去，这样就可以使用<code>pip</code>和<code>easy_install</code>进行安装了。这里说一个很重要的事情：<br><strong>请在发布自己项目之前做好测试，确认自己上传的是一个可用，无害的包</strong><br>当你已经完成上面的步骤之后，那么你只需要以下几步就可以完成了。以我的项目为例子:</p>
<ul>
<li>配置<code>setup.py</code>:</li>
</ul>
<figure class="highlight Python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> codecs <span class="keyword">import</span> open</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"></div><div class="line"><span class="keyword">if</span> sys.argv[-<span class="number">1</span>] == <span class="string">'publish'</span>:</div><div class="line">    os.system(<span class="string">'python setup.py sdist upload'</span>)</div><div class="line">    sys.exit()</div><div class="line"></div><div class="line">packages = [</div><div class="line">    <span class="string">'httpmultipart'</span>,</div><div class="line">]</div><div class="line"></div><div class="line">requires = []</div><div class="line"></div><div class="line">version = <span class="string">''</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'httpmultipart/__init__.py'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> fd:</div><div class="line">    version = re.search(<span class="string">r'^__version__\s*=\s*[\'"]([^\'"]*)[\'"]'</span>,</div><div class="line">                        fd.read(), re.MULTILINE).group(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> version:</div><div class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">'Cannot find version information'</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'README.rst'</span>, <span class="string">'r'</span>, <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">    readme = f.read()</div><div class="line"></div><div class="line">setup(</div><div class="line">    name=<span class="string">'httpmultipart'</span>,</div><div class="line">    version=version,</div><div class="line">    description=<span class="string">'A httpmultipart post handler'</span>,</div><div class="line">    long_description=readme + <span class="string">'\n\n'</span>,</div><div class="line">    author=<span class="string">'TaoBeier'</span>,</div><div class="line">    author_email=<span class="string">'zhangjintao9020@gmail.com'</span>,</div><div class="line">    url=<span class="string">'https://github.com/tao12345666333/httpmultipart'</span>,</div><div class="line">    packages=packages,</div><div class="line">    package_data={<span class="string">''</span>: [<span class="string">'LICENSE'</span>]},</div><div class="line">    package_dir={<span class="string">'httpmultipart'</span>: <span class="string">'httpmultipart'</span>},</div><div class="line">    include_package_data=<span class="keyword">True</span>,</div><div class="line">    install_requires=requires,</div><div class="line">    license=<span class="string">'MIT'</span>,</div><div class="line">    zip_safe=<span class="keyword">False</span>,</div><div class="line">    platforms=<span class="string">'any'</span>,</div><div class="line">    classifiers=(</div><div class="line">        <span class="string">'Development Status :: 5 - Production/Stable'</span>,</div><div class="line">        <span class="string">'Intended Audience :: Developers'</span>,</div><div class="line">        <span class="string">'Natural Language :: English'</span>,</div><div class="line">        <span class="string">'License :: OSI Approved :: MIT License'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 2.7'</span>,</div><div class="line">        <span class="string">'Topic :: Software Development :: Libraries'</span>,</div><div class="line">        <span class="string">'Topic :: Software Development :: Libraries :: Python Modules'</span>,</div><div class="line">    ),</div><div class="line">)</div></pre></td></tr></table></figure>

<p>当然大部分时候也不需要这么麻烦，简化的配置可以参考官方的文档。注意最下面那部分<code>classifiers</code>是按照<a href="https://pypi.python.org/pypi?:action=list_classifiers" target="_blank" rel="external">PyPI官方的列表填写</a>的。还有，如果有些文件想要额外打包进去，那么需要在根目录添加<code>MANIFEST.in</code>文件。</p>
<ul>
<li>打包代码</li>
</ul>
<figure class="highlight Bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python setup.py sdist <span class="comment"># 生成pip支持的安装包</span></div><div class="line">$ python setup.py bdist_wheel <span class="comment"># 生成支持easy_install的安装包</span></div></pre></td></tr></table></figure>

<ul>
<li><p>发布到PyPI上</p>
<p>  首先在<a href="https://pypi.python.org/pypi" target="_blank" rel="external">PyPI</a>上<a href="https://pypi.python.org/pypi?%3Aaction=register_form" target="_blank" rel="external">注册</a>一个帐号，然后进行下面两步：</p>
<ul>
<li>注册package</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python setup.py register</div><div class="line">$ <span class="comment"># 在这一步会有一些提示，按照提示选择，输入自己帐号密码相关的信息即可</span></div><div class="line">$ <span class="comment"># 在提示你要不要保存帐号信息的时候，</span></div><div class="line">$ <span class="comment"># 你选择了‘y’，</span></div><div class="line">$ <span class="comment"># 则会在你的用户目录下生成一个 .pypirc 的文件，</span></div><div class="line">$ <span class="comment"># 其中明文保存着你的帐号和密码。</span></div></pre></td></tr></table></figure>

<p>这里稍微再提一点，如果在提示是否保存账户信息的时候，选择了‘n’，想反悔了也没关系，我们可以手动创建一个<code>~/.pypirc</code>文件。格式如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">[distutils]</span></div><div class="line"><span class="setting">index-servers=<span class="value">pypi</span></span></div><div class="line"></div><div class="line"><span class="title">[pypi]</span></div><div class="line"><span class="setting">repository = <span class="value">https://pypi.python.org/pypi</span></span></div><div class="line"><span class="setting">username = <span class="value">your username</span></span></div><div class="line"><span class="setting">password = <span class="value">your password</span></span></div></pre></td></tr></table></figure>

<ul>
<li>上传package</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python setup.py sdist bdist_wheel upload</div></pre></td></tr></table></figure>

<p>在上传完成提示<code>200</code>响应的时候，你就上传成功了，去PyPI上看看有没有上传成功的包，并且试着用<code>pip</code>进行安装吧！</p>
<p>这里我省略了一步，就是发布前的测试，你可以使用<a href="https://testpypi.python.org/pypi" target="_blank" rel="external">PyPI的测试服务器</a>进行测试发布，发布到这里的包并不会对你正式发布有任何影响。</p>
<h2 id="项目托管在Github上">项目托管在Github上</h2>
<p>开源到Github上后，就是继续维护和开发，这点就不多说了。</p>
<h2 id="开发相关">开发相关</h2>
<p>建议使用<code>virtualenv</code>之类的工具构建纯净的环境，重复的动作交给<code>Make</code>之类的工具。</p>
<p>这篇算是一个小小的总结加备忘吧，经验尚缺，还望指正。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>做个备忘，也希望可以帮到别人。</p>
</blockquote>
<h2 id="目录结构（初始化）">目录结构（初始化）</h2>
<p>一般我们都会选择在项目的顶层包含较基础的文件，比如<code>setup.py</code>，<code>]]>
    </summary>
    
      <category term="pip" scheme="http://moelove.info/tags/pip/"/>
    
      <category term="git" scheme="http://moelove.info/tags/git/"/>
    
      <category term="Python" scheme="http://moelove.info/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对监控系统的思考]]></title>
    <link href="http://moelove.info/2015/10/16/%E5%AF%B9%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://moelove.info/2015/10/16/对监控系统的思考/</id>
    <published>2015-10-15T16:59:01.000Z</published>
    <updated>2015-10-18T07:29:45.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>近期在做运维监控方面的事情，也研究了一下其他人是如何做的。把自己的想法做个总结记录一下吧。</p>
</blockquote>
<h3 id="监控期望的目标">监控期望的目标</h3>
<ul>
<li>及时发现</li>
</ul>
<blockquote>
<p>需要的是即时监控并报警</p>
</blockquote>
<ul>
<li>及时定位</li>
</ul>
<blockquote>
<p>定位问题要分开讲</p>
<ul>
<li><p>运维层面</p>
<blockquote>
<p>是机器硬件问题还是上面运行的基础服务的问题，或者是新上线代码的问题，需要回滚。</p>
</blockquote>
</li>
<li><p>代码层面</p>
<blockquote>
<p>在发生问题的时候，优先解决问题。定位代码问题提交hotfix 可以在解决问题之后做。</p>
</blockquote>
</li>
</ul>
</blockquote>
<ul>
<li>及时处理</li>
<li>提前预测（尽量减少问题的发生）</li>
</ul>
<blockquote>
<p>提前预测可以做的事情有很多，数据挖掘/分析之类的。当然有个更简单的方法，就是先小范围上线，进行监控。如果发现出问题了，就停止上线，进行回滚。（我们现在就是这样做的，虽然原因并不是这个 2333</p>
</blockquote>
<h3 id="监控遇到的主要问题">监控遇到的主要问题</h3>
<ul>
<li>监控指标多</li>
</ul>
<blockquote>
<p>服务器CPU,内存，网络等的指标，基础服务Redis, MongoDB等的运行指标，对外服务的API是否正常工作，还有数据是否正确等。 </p>
</blockquote>
<ul>
<li>监控报警多</li>
</ul>
<blockquote>
<p>监控指标多的时候，自然报警也会相应增加，但是报警的分组与轻重缓急也是一个很麻烦的问题。还有就是部署着不同服务的机器，触发报警时候的指标也不好确定。</p>
</blockquote>
<ul>
<li>报警多而且有关联，如何查找原因</li>
</ul>
<blockquote>
<p>可能同时会有多个指标触发了报警，但是要定位问题的时候，如何可以快速的定位问题。</p>
</blockquote>
<h3 id="多维度数据监控">多维度数据监控</h3>
<blockquote>
<p>这个话题太大(要感谢Baidu的颜大大的指点）</p>
<ul>
<li><p>数据监控符合<a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E9%9B%B7%E6%89%98%E6%B3%95%E5%88%99" target="_blank" rel="external">二八原则</a>,重要数据需要多角度进行观察，需要有meta管理，需要动态简单配置。选择 好的，合理的数据模型可以有效的进行处理。</p>
</li>
<li><p>数据采集部分，在单机器做聚合;命名上使用正则格式化;完善的配置功能，支持数据流自定义维度。</p>
</li>
</ul>
</blockquote>
<ul>
<li>对开源系统的使用，需要按照自己的实际情况进行适配。保证高可用性</li>
</ul>
<p><em>先写这些吧，之后有时间再写，还有QCon上对运维监控上的一些分享也非常值得思考</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>近期在做运维监控方面的事情，也研究了一下其他人是如何做的。把自己的想法做个总结记录一下吧。</p>
</blockquote>
<h3 id="监控期望的目标">监控期望的目标</h3>
<ul>
<li>及时发现</li>
</ul>
<bloc]]>
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="DevOps" scheme="http://moelove.info/tags/DevOps/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Open-Falcon监控系统部署]]></title>
    <link href="http://moelove.info/2015/10/13/Open-Falcon%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/"/>
    <id>http://moelove.info/2015/10/13/Open-Falcon监控系统部署/</id>
    <published>2015-10-13T13:01:00.000Z</published>
    <updated>2015-10-13T16:02:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本文并不分析Open-Falcon的架构或者选用它的原因，官方的文档在<a href="http://book.open-falcon.com/zh/intro/README.html" target="_blank" rel="external">这里</a>，虽然还不够完善。不过这也是我写这篇的原因，官方文档并没能把整个部署过程连在一起，而且个别地方有点问题。我在这篇文章中就不介绍各个组件的作用和功能了，只是单纯的介绍如何从零部署。</p>
</blockquote>
<h2 id="安装">安装</h2>
<h3 id="下载">下载</h3>
<blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/XiaoMi/<span class="keyword">open</span>-falcon/releases/download/<span class="number">0.0</span>.<span class="number">5</span>/<span class="keyword">open</span>-falcon-<span class="number">0.0</span>.<span class="number">5</span>.tar.gz -O <span class="keyword">open</span>-falcon.tar.gz</div></pre></td></tr></table></figure>

<h3 id="解压">解压</h3>
<blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> tmp</div><div class="line">tar -zxvf <span class="keyword">open</span>-falcon.tar.gz -C ./tmp</div></pre></td></tr></table></figure>

<h3 id="基础环境">基础环境</h3>
<blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> redis-<span class="keyword">server</span></span></div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> mysql-<span class="keyword">server</span></div><div class="line">pip <span class="keyword">install</span> virtualenv</div><div class="line"></div><div class="line"># 数据库初始化的代码来源于官方文档</div><div class="line">git clone https://github.com/<span class="keyword">open</span>-falcon/scripts.git</div><div class="line">cd scripts</div><div class="line">mysql -h localhost -u root -p &lt; db_schema/graph-db-<span class="keyword">schema</span>.<span class="keyword">sql</span></div><div class="line">mysql -h localhost -u root -p &lt; db_schema/dashboard-db-<span class="keyword">schema</span>.<span class="keyword">sql</span></div><div class="line"></div><div class="line">mysql -h localhost -u root -p &lt; db_schema/portal-db-<span class="keyword">schema</span>.<span class="keyword">sql</span></div><div class="line">mysql -h localhost -u root -p &lt; db_schema/links-db-<span class="keyword">schema</span>.<span class="keyword">sql</span></div><div class="line">mysql -h localhost -u root -p &lt; db_schema/uic-db-<span class="keyword">schema</span>.<span class="keyword">sql</span></div></pre></td></tr></table></figure>

<h2 id="配置">配置</h2>
<p><strong>数据库连接的配置格式是:</strong> <code>username:password@tcp(path:port)/xxxx</code></p>
<h3 id="agent">agent</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>开始监听1988端口,查看log.<br>默认端口是1988, 可以打开 <a href="http://127.0.0.1:1988" target="_blank" rel="external">http://127.0.0.1:1988</a> 查看一个比较简单的web dashboard. 没什么特殊需要的话, 可以使用默认配置.</p>
</blockquote>
<h3 id="hbs">hbs</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>心跳服务默认http端口是6030, rpc 端口 6031</p>
</blockquote>
<h3 id="transfer">transfer</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>默认http端口是6060, rpc端口8433</p>
</blockquote>
<h3 id="judge">judge</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>http端口6081, rpc端口 6080<br>配置项中注意alarm的 redis链接 和hbs的server地址,如果修改过请记得对应.</p>
</blockquote>
<h3 id="graph">graph</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>rpc端口 6070,  http端口 6071<br>数据库文件存储在<code>/home/work/data/6070</code> 启动报错的话, 换sudo 或者 root 用户启动.<br>注意修改数据库连接.</p>
</blockquote>
<p>上面的服务配置完成数据就开始采集了. </p>
<h3 id="dashboard">dashboard</h3>
<blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">virtualenv <span class="keyword">env</span></div><div class="line"><span class="keyword">source</span> <span class="keyword">env</span>/bin/activate</div><div class="line">./<span class="keyword">env</span>/bin/pip install -r pip_requirements.txt</div><div class="line"># 使用</div><div class="line">./<span class="keyword">env</span>/bin/<span class="keyword">python</span> wsgi.py</div><div class="line"># 或者用</div><div class="line">deactivate && ./<span class="keyword">control</span> start && ./<span class="keyword">control</span> tail</div></pre></td></tr></table></figure>

<blockquote>
<p>可以更改为自定义端口.这里可以查看Endpoints 的相关数据并绘图.</p>
</blockquote>
<h3 id="query">query</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>只要修改cfg.json 文件即可, 注意还有 <code>graph_backends.txt</code> 文件</p>
</blockquote>
<h3 id="fe">fe</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>注意配置项目中的数据库连接, 以及下面的<code>shortcut</code> 中需要配置外网可以访问的地址,如果不是在服务器部署的话,这里默认也没有关系.</p>
</blockquote>
<h3 id="portal">portal</h3>
<blockquote>
<p>这里要注意一个坑. 如果使用<code>./control start</code> 启动服务, 并且更改了默认端口的, 请配置 <strong>gunicorn.conf</strong> 中的<strong>bind</strong>项. 如果是使用<code>python wsgi.py</code>启动的话, 修改<strong>wsgi.py</strong>中的端口即可.<br>同时在配置 <code>frame/config.py</code> 的时候, 要注意所谓<strong>UIC_ADDRESS</strong> 选项的配置, 其实就是填写上面<strong>fe</strong> 模块的地址.</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UIC_ADDRESS = {</div><div class="line">    <span class="string">'internal'</span>: <span class="string">'http://127.0.0.1:port'</span>, <span class="comment">#你的内网地址</span></div><div class="line">    <span class="string">'external'</span>: <span class="string">'http://your_fe_name'</span>, <span class="comment">#外网访问的地址, 如果是本地部署,这里可以和内网地址一样 </span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="alarm">alarm</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>需要配置的就是自定义的端口监控地址, 和下面的api, 其他部分保持默认即可.<br>在<a href="http://book.open-falcon.com/zh/install_from_src/alarm.html" target="_blank" rel="external">它的文档</a>中写着下面这样的说明</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">{<span class="keyword">...</span></div><div class="line">  <span class="string">"api"</span>: {</div><div class="line">      <span class="string">"portal"</span>: <span class="string">"http://falcon.example.com"</span>, <span class="comment"># 内网可访问的portal的地址</span></div><div class="line">      <span class="string">"uic"</span>: <span class="string">"http://uic.example.com"</span>, <span class="comment"># 内网可访问的uic(或fe)的地址</span></div><div class="line">      <span class="string">"links"</span>: <span class="string">"http://link.example.com"</span> <span class="comment"># 外网可访问的links的地址</span></div><div class="line">  }     </div><div class="line">}</div></pre></td></tr></table></figure>

<blockquote>
<p>但是如果按照这样配的话,所有东西就只能在内网访问了.这明显是不符合我们的期望的. 所以这里要全部配置成外网可以访问的地址,<strong>防止踩坑</strong>.</p>
</blockquote>
<h3 id="sender">sender</h3>
<blockquote>
<p>这个组件用于调用自己提供的短信和邮件接口, 编辑 cfg.json 添加</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">{<span class="keyword">...</span></div><div class="line">  <span class="string">'api'</span>: {</div><div class="line">      <span class="string">'sms'</span>: <span class="string">'http://your_send_sms_api'</span>,</div><div class="line">      <span class="string">'mail'</span>: <span class="string">'http://your_send_mail_api'</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<blockquote>
<p>在调用的时候, 会把消息先写入redis队列中, 之后再调用接口,进行消息发送.<br>worker 参数是对队列的配置.</p>
</blockquote>
<h3 id="links">links</h3>
<blockquote>
<p><code>mv cfg.example.json cfg.json &amp;&amp; ./control start &amp;&amp; ./control tail</code><br>告警合并组件, python应用, 记得修改默认端口即可.</p>
</blockquote>
<h2 id="其他">其他</h2>
<h3 id="task">task</h3>
<blockquote>
<p>监控自检程序</p>
</blockquote>
<h3 id="gateway">gateway</h3>
<blockquote>
<p>没有跨机房问题可以忽略.(hhah</p>
</blockquote>
<h3 id="redis-monitor-py">redis-monitor.py</h3>
<blockquote>
<p>scripts 文件夹中一个很简单的脚本, 把redis info 中的数据读出,写入数据库, 供监控使用.</p>
</blockquote>
<p>最后附图一张，前几天我启动这个服务时候的终端。<br><img src="http://7fvfx0.com1.z0.glb.clouddn.com/1911x1160_scrot.png" alt="screen_shot"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>本文并不分析Open-Falcon的架构或者选用它的原因，官方的文档在<a href="http://book.open-falcon.com/zh/intro/README.html" target="_blank" rel="external"]]>
    </summary>
    
      <category term="DevOps" scheme="http://moelove.info/tags/DevOps/"/>
    
      <category term="Open-Falcon" scheme="http://moelove.info/tags/Open-Falcon/"/>
    
      <category term="Go" scheme="http://moelove.info/tags/Go/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[源码编译MongoDB]]></title>
    <link href="http://moelove.info/2015/09/13/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91MongoDB/"/>
    <id>http://moelove.info/2015/09/13/源码编译MongoDB/</id>
    <published>2015-09-13T13:28:43.000Z</published>
    <updated>2015-09-13T15:52:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>上周放假正好有时间，编译安装了MongoDB，虽然MongoDB用了挺长时间的，但还是第一次用源码编译。在此做个备忘。因为已经完整编译安装过了，所以写起来的时候，就按照先知视角来写了～ 2333</p>
</blockquote>
<h2 id="下载MongoDB源码">下载MongoDB源码</h2>
<p>MongoDB的<a href="https://www.mongodb.org/" target="_blank" rel="external">官网</a>上是有已经编译好的二进制包的，这里选择clone <a href="https://github.com/mongodb/mongo" target="_blank" rel="external">MongoDB在github上的仓库</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/mongodb/mongo && <span class="keyword">cd</span> mongo</div></pre></td></tr></table></figure>

<p>在<code>docs/building.md</code>中是编译所需的依赖。</p>
<ul>
<li>A modern C++ compiler. One of the following is required.<ul>
<li>GCC 4.8.2 or newer</li>
<li>Clang 3.4 (or Apple XCode 5.1.1 Clang) or newer</li>
<li>Visual Studio 2013 Update 2 or newer</li>
</ul>
</li>
<li>Python 2.7</li>
<li>SCons 2.3</li>
</ul>
<p>我这台服务器是CentOS 6.5, 上面的gcc版本比较低，这里就先更新gcc咯.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gcc --version</div><div class="line"><span class="function"><span class="title">gcc</span> <span class="params">(<span class="variable">GCC</span>)</span> 4.4.7 20120313 <span class="params">(<span class="variable">Red</span> <span class="variable">Hat</span> <span class="number">4.4</span>.<span class="number">7</span>-<span class="number">16</span>)</span>                                </span></div><div class="line">C<span class="title">opyright</span> © 2010 F<span class="title">ree</span> S<span class="title">oftware</span> F<span class="title">oundation</span>, I<span class="title">nc</span>.                            </div><div class="line">本程序是自由软件；请参看源代码的版权声明。</div><div class="line">本软件没有任何担保；             </div><div class="line">包括没有适销性和某一专用目的下的适用性担保。</div></pre></td></tr></table></figure>

<h2 id="编译升级gcc">编译升级gcc</h2>
<p>在gcc的<a href="https://gcc.gnu.org/" target="_blank" rel="external">官网</a>找到<a href="https://gcc.gnu.org/install/download.html" target="_blank" rel="external">下载页面</a>。使用<a href="https://gcc.gnu.org/svn.html" target="_blank" rel="external">svn</a>或者通过<a href="https://gcc.gnu.org/mirrors.html" target="_blank" rel="external">ftp镜像站</a>下载源码.<br>我使用了<a href="http://ftp.tsukuba.wide.ad.jp/software/gcc/" target="_blank" rel="external">一个ftp镜像站</a>下载的<a href="http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.2.0/gcc-5.2.0.tar.bz2" target="_blank" rel="external">源码压缩包</a>。 然后进行解压和安装依赖。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -xjf gcc-<span class="number">5.2</span>.<span class="number">0</span>.tar.bz2 && <span class="built_in">cd</span> gcc-<span class="number">5.2</span>.<span class="number">0</span></div><div class="line"></div><div class="line">./contrib/download_prerequisites(等待依赖完成)</div></pre></td></tr></table></figure>

<p>之后编译</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">cd</span> <span class="string">.</span><span class="string">.</span> <span class="comment">&&</span> <span class="comment">mkdir</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">build</span><span class="literal">-</span><span class="comment">5</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0</span> <span class="comment">&&</span> <span class="comment">cd</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">build</span><span class="literal">-</span><span class="comment">5</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0</span></div><div class="line"></div><div class="line"><span class="comment">#</span> <span class="comment">编译</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="string">.</span><span class="comment">/gcc</span><span class="literal">-</span><span class="comment">5</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">checking=release</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">languages=c</span><span class="string">,</span><span class="comment">c</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">disable</span><span class="literal">-</span><span class="comment">multilib</span></div></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">checking build system type... x86_64-unknown-linux-gnu</div><div class="line">checking host system type... x86_64-unknown-linux-gnu</div><div class="line">checking target system type... x86_64-unknown-linux-gnu</div><div class="line">checking for a BSD-compatible <span class="operator"><span class="keyword">install</span>... /usr/<span class="keyword">bin</span>/<span class="keyword">install</span> -c</span></div><div class="line">checking whether <span class="keyword">ln</span> works... yes</div><div class="line">checking whether <span class="keyword">ln</span> -s works... yes</div><div class="line">checking <span class="keyword">for</span> a sed that does <span class="keyword">not</span> <span class="keyword">truncate</span> <span class="keyword">output</span>... /<span class="keyword">bin</span>/sed</div><div class="line">checking <span class="keyword">for</span> gawk... gawk</div><div class="line">checking <span class="keyword">for</span> libatomic support... yes</div><div class="line">checking <span class="keyword">for</span> libcilkrts support... yes</div><div class="line">checking <span class="keyword">for</span> libitm support... yes</div><div class="line">checking <span class="keyword">for</span> libsanitizer support... yes</div><div class="line">checking <span class="keyword">for</span> libvtv support... yes</div><div class="line">checking <span class="keyword">for</span> gcc... gcc</div><div class="line">checking <span class="keyword">for</span> C compiler <span class="keyword">default</span> <span class="keyword">output</span> file name... a.out</div><div class="line">checking whether the C compiler works... yes</div><div class="line">checking whether we <span class="keyword">are</span> <span class="keyword">cross</span> compiling... <span class="keyword">no</span></div><div class="line">checking <span class="keyword">for</span> suffix <span class="keyword">of</span> executables... </div><div class="line">checking <span class="keyword">for</span> suffix <span class="keyword">of</span> object files... o</div><div class="line">checking whether we <span class="keyword">are</span> <span class="keyword">using</span> the GNU C compiler... yes</div><div class="line">checking whether gcc accepts -g... yes</div><div class="line">checking <span class="keyword">for</span> gcc <span class="keyword">option</span> <span class="keyword">to</span> accept ISO C89... none needed</div><div class="line">checking <span class="keyword">for</span> g++... g++</div><div class="line">checking whether we <span class="keyword">are</span> <span class="keyword">using</span> the GNU C++ compiler... yes</div><div class="line">checking whether g++ accepts -g... yes</div><div class="line">checking whether g++ accepts -static-libstdc++ -static-libgcc... <span class="keyword">no</span></div><div class="line">checking <span class="keyword">for</span> gnatbind... <span class="keyword">no</span></div><div class="line">checking <span class="keyword">for</span> gnatmake... <span class="keyword">no</span></div><div class="line">checking whether compiler driver understands Ada... <span class="keyword">no</span></div><div class="line">checking how <span class="keyword">to</span> compare bootstrapped objects... cmp <span class="comment">--ignore-initial=16 $$f1 $$f2</span></div><div class="line">checking <span class="keyword">for</span> objdir... .libs</div><div class="line">configure: WARNING: <span class="keyword">using</span> <span class="keyword">in</span>-tree ISL, disabling <span class="keyword">version</span> <span class="keyword">check</span></div></pre></td></tr></table></figure>

<p>一般情况下， 就这样gcc就可以编译完成了。 但是因为我这台机器是单核1G没有swap区， 所以我遇到了下面的问题：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 排版有点错乱惹...</span></div><div class="line"></div><div class="line">build/vec.o</div><div class="line">build/min-insn-modes.o</div><div class="line">build/gensupport.o</div><div class="line">build/print-rtl.o</div><div class="line">build/read-md.o</div><div class="line">build/errors.o ../build-x86_64-unknown-linux-gnu/libiberty/libiberty.a</div><div class="line">build/genattrtab ../../gcc-5.2.0/gcc/common.md ../../gcc-5.2.0/gcc/config/i</div><div class="line">386/i386.md insn-conditions.md \</div><div class="line">                -Atmp-attrtab.c -Dtmp-dfatab.c -Ltmp-latencytab.c</div><div class="line">make[3]: <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> [s-attrtab] 已杀死</div><div class="line">make[3]: Leaving directory `/home/tao/gcc-build-5.0.2/gcc'</div><div class="line">make[2]: <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> [all-stage1-gcc] 错误 2</div><div class="line">make[2]: Leaving directory `/home/tao/gcc-build-5.0.2'</div><div class="line">make[1]: <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> [stage1-bubble] 错误 2</div><div class="line">make[1]: Leaving directory `/home/tao/gcc-build-5.0.2'</div><div class="line">make: <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> [all] 错误 2</div></pre></td></tr></table></figure>

<p>大致查了下，是因为没有swap区的原因，根据<a href="http://stackoverflow.com/questions/18389612/make-exits-with-error-2-when-trying-to-install-gcc-4-8-1#" target="_blank" rel="external">这篇</a> 得到的解决办法是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="constant">SWAP</span>=<span class="regexp">/tmp/swap</span></div><div class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/zero</span> of=<span class="variable">$SWAP</span> bs=<span class="number">1</span>M count=<span class="number">500</span></div><div class="line">mkswap <span class="variable">$SWAP</span></div><div class="line">sudo swapon <span class="variable">$SWAP</span></div></pre></td></tr></table></figure>

<p>之后就是gcc 的编译时间了， 这个时间可以去写写代码补个番啥的。这台机器只是平时拿来玩的，配置炒鸡低。编译gcc从17：20开始，一直到20：09停止。(期间我去补番啦 2333)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 只会执行下面的命令</span></div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="preprocessor"># 切换gcc到新版本</span></div><div class="line">update-alternatives --install /usr/bin/gcc gcc /usr/local/bin/gcc-<span class="number">5.0</span><span class="number">.2</span> <span class="number">66</span></div><div class="line"><span class="preprocessor"># 我重新ssh登录后才看到更新生效的</span></div><div class="line">gcc --version</div><div class="line">gcc (GCC) <span class="number">5.2</span><span class="number">.0</span></div><div class="line">Copyright © <span class="number">2015</span> Free Software Foundation, Inc.</div><div class="line">本程序是自由软件；请参看源代码的版权声明。本软件没有任何担保；</div><div class="line">包括没有适销性和某一专用目的下的适用性担保。</div></pre></td></tr></table></figure>

<h2 id="升级Python">升级Python</h2>
<p>CentOS上默认的Python对于之后要安装的scons来说，还是版本太低。再次上<a href="https://www.python.org" target="_blank" rel="external">Python 官网</a> (官网真是个好地方2333)下载Python2.7的<a href="https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tar.xz" target="_blank" rel="external">源码</a><br>编译过很多次了， 就只写主要的东西了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">xz -<span class="keyword">d</span> <span class="keyword">python</span>-<span class="number">2.7</span>.<span class="number">10</span>.tar.xz</div><div class="line">tar -xvf <span class="keyword">python</span>-<span class="number">2.7</span>.<span class="number">10</span>.tar && <span class="keyword">cd</span> <span class="keyword">python</span>-<span class="number">2.7</span>.<span class="number">10</span></div><div class="line"># 对于这次编译MongoDB来说，一定需要安装的是bzip2依赖</div><div class="line">yum install -<span class="keyword">y</span> bzip2-devel</div><div class="line"># 编译</div><div class="line">./configure --prefix=/usr/local/python2.<span class="number">7</span></div><div class="line"><span class="keyword">make</span></div><div class="line"><span class="keyword">make</span> install</div><div class="line"># 更新</div><div class="line"><span class="keyword">update</span>-alternatives --install /usr/bin/<span class="keyword">python</span> <span class="keyword">python</span> /usr/local/bin/<span class="keyword">python</span> <span class="number">69</span></div></pre></td></tr></table></figure>

<h2 id="安装scons">安装scons</h2>
<p>在<a href="http://www.scons.org/" target="_blank" rel="external">官网</a>上找到<a href="http://iweb.dl.sourceforge.net/project/scons/scons/2.3.6/scons-2.3.6.tar.gz" target="_blank" rel="external">源码包</a>直接安装</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 依赖解决</div><div class="line">yum install pcre-devel <span class="keyword">python</span>-devel</div><div class="line"># 解压安装</div><div class="line">tar -zxvf scons-<span class="number">2.3</span>.<span class="number">6</span>.tar.gz && <span class="keyword">cd</span> scons-<span class="number">2.3</span>.<span class="number">6</span></div><div class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> install</div></pre></td></tr></table></figure>

<h2 id="编译安装MongoDB">编译安装MongoDB</h2>
<p>最后的安装过程就不是这篇里面的重点了， 遇到的一个坑是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Initializer* _theGlobalInitializer </span>=<span class="string"> &getGlobalInitializer();</span></div></pre></td></tr></table></figure>

<p>有这样的报错信息。 查了一下，根据<a href="https://jira.mongodb.org/browse/SERVER-19353" target="_blank" rel="external">这篇</a>只要在构建的时候，加上<code>--disable-warnings-as-errors</code>就可以解决了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scons <span class="literal">all</span> --disable-warnings-as-errors</div><div class="line"><span class="comment"># 其他的设置可以查看scons的相关文档</span></div></pre></td></tr></table></figure>

<p>本篇的重点是编译的过程，后续MongoDB配置部分抽空再写。全文完。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>上周放假正好有时间，编译安装了MongoDB，虽然MongoDB用了挺长时间的，但还是第一次用源码编译。在此做个备忘。因为已经完整编译安装过了，所以写起来的时候，就按照先知视角来写了～ 2333</p>
</blockquote>
<h2 id="]]>
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="MongoDB" scheme="http://moelove.info/tags/MongoDB/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重置Ghost博客的密码]]></title>
    <link href="http://moelove.info/2015/07/21/%E9%87%8D%E7%BD%AEGhost%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%AF%86%E7%A0%81/"/>
    <id>http://moelove.info/2015/07/21/重置Ghost博客的密码/</id>
    <published>2015-07-21T15:11:04.000Z</published>
    <updated>2015-07-21T16:51:55.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>在搭建Ghost博客的时候，尚未配置mail服务器时，重置密码的方法做个记录</p>
</blockquote>
<h3 id="打开数据库查看用户信息">打开数据库查看用户信息</h3>
<p>如果全部默认设置，使用生产环境的话，应该是<br><code>sqlite3 content/data/ghost.db</code></p>
<p>如果是开发环境应该是<br><code>sqlite3 content/date/ghost-dev.db</code></p>
<p>查看用户信息<br><code>sqlite&gt;SELECT * FROM users;</code></p>
<h3 id="更新用户密码">更新用户密码</h3>
<ul>
<li><p>Ghost对用户密码用的是BCrypt加密，可以使用<a href="http://bcrypthashgenerator.apphb.com/" target="_blank" rel="external">BCrypt Hash Generator</a>之类的工具生成一个想要修改的密码，例如”mypasswd”生成的密码是<br>  <code>$2a$10$QecJeBdw2lONRTnHJ0RoVO6DczdJWf4h4QgaUcgKsYFZlzTe1yeEK</code></p>
</li>
<li><p>假设之前查看到的用户信息，邮箱是<strong>admin@domain.com</strong> 那么，使用这样更新密码</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">UPDATE</span> users SET password=<span class="string">"<span class="variable">$2</span>a<span class="variable">$10</span><span class="variable">$QecJeBdw2lONRTnHJ0RoVO6DczdJWf4h4QgaUcgKsYFZlzTe1yeEK</span>"</span> WHERE email=<span class="string">"admin<span class="variable">@domain</span>.com"</span></div></pre></td></tr></table></figure>

<ul>
<li>退出sqlite3<br><code>.exit</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>在搭建Ghost博客的时候，尚未配置mail服务器时，重置密码的方法做个记录</p>
</blockquote>
<h3 id="打开数据库查看用户信息">打开数据库查看用户信息</h3>
<p>如果全部默认设置，使用生产环境的话，应该是<br><]]>
    </summary>
    
      <category term="Blog" scheme="http://moelove.info/tags/Blog/"/>
    
      <category term="sqlite" scheme="http://moelove.info/tags/sqlite/"/>
    
      <category term="Node" scheme="http://moelove.info/categories/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3.17]]></title>
    <link href="http://moelove.info/2015/03/17/3-17/"/>
    <id>http://moelove.info/2015/03/17/3-17/</id>
    <published>2015-03-16T16:34:34.000Z</published>
    <updated>2015-03-16T16:37:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="8小时内求生存">8小时内求生存</h2>
<h2 id="8小时外求发展">8小时外求发展</h2>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="8小时内求生存">8小时内求生存</h2>
<h2 id="8小时外求发展">8小时外求发展</h2>
]]>
    </summary>
    
      <category term="Life" scheme="http://moelove.info/tags/Life/"/>
    
      <category term="Life" scheme="http://moelove.info/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[近况]]></title>
    <link href="http://moelove.info/2014/10/16/%E8%BF%91%E5%86%B5/"/>
    <id>http://moelove.info/2014/10/16/近况/</id>
    <published>2014-10-16T15:34:39.000Z</published>
    <updated>2014-11-27T13:12:35.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>博客好长时间没有更新了，今天抽空大致来说一下近况吧</p>
</blockquote>
<h3 id="工作">工作</h3>
<p>用这个标题的话，其实感觉想写的确实好多，但是还是挑一些比较重要的来说吧。现在的公司说实话还确实没有让我失望，工位上配的是一个 22寸的 AOC 显示器和一个24寸的 Dell 显示器， 主机内存 12G （我每天跑个Linux是有点浪费）办公区每天有物业定时打扫神马的，下午的时候有茶歇（茶水间还有一堆零食）。同事们相处感觉都很不错,每天中午一起出去吃饭，各种聊天调侃神马的，只是一开始不太了解项目中的配置神马的，让老大费心了…</p>
<p>这段时间还有很多有趣的事情 比如： 去金海湾度假村团建之类的。 再说一下最近的感受吧。</p>
<p>因为国庆前需要上线，所以放假前就每天都是在忙着开发神马的。不过那两周也是近期感觉最爽的时候 <s>写代码高潮不断</s> 而且也确实感觉工作是蛮有挑战性的，确实是我想要的工作 :-) 。 不过我还记得那周一，一打开邮箱看到中有7份未读的需求邮件， 确实是略惊吓。<br>  在开发的项目，因为改变了设计思路，所以这些天主要都是在写前端。只不过一开始的时候感觉略虐心啊， 写Python时间长了已经是不习惯其他语言那种书写规范了 <s>一堆括号写的好烦躁</s> 但是从这两天的感觉来看，得感谢老大的这种设计思路，这段时间学到的确实很多。 从框架到一些库，一些插件， 还有程序上一些比较巧妙的用法 <s>正在努力消化中</s></p>
<h3 id="生活">生活</h3>
<p><s>有点后悔加上标题了</s> 其实主要要说的应该都放在这里吧。<br>从搬家后基本上每天生活都很规律，目前差不多适应了。<s>(找工作和面试神马的我写到碎碎念里面了，具体的等半年或者一年后当回忆录来写 233)</s>值得吐槽的就是电信的客服，用的是电信的网，前几天换了路由器忘记了密码，打客服重置密码，但是一直连接不成功（691错误，明显就是帐号密码的问题嘛）结果本来想到了周末放假的时候再好好处理，结果到了周末打电话却一直没有客服啊<s>用联通号打电信的客服我也是醉了</s> 最后到了周一才让客服又重置才成功。</p>
<p>其实那也是导致我这么久没有更新博客的原因orz 。 </p>
<ul>
<li>一个原因是因为电脑重装了系统，环境啥的一直没有配置</li>
<li>另一个就是因为网络坑爹，实在有心无力</li>
</ul>
<p>再者就是帝都的天气让人确实有点无奈，有天早上刚下楼，我还以为我要迈步进入寂静岭了 TAT ，感觉能幸存下来确实是很不容易啊。 </p>
<p>最后说一下最近在网络弄好之后，挖了一个坑。打算独立开发一个网站的说， 重复造轮子的原因和大多数人是一样的 ，现有的东西没有我想要的 <s><b>正好把最近学到的东西都拿来练练手</b></s>  </p>
<h2 id="_Try_My_Best_!_"><b> Try My Best ! </b></h2>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>博客好长时间没有更新了，今天抽空大致来说一下近况吧</p>
</blockquote>
<h3 id="工作">工作</h3>
<p>用这个标题的话，其实感觉想写的确实好多，但是还是挑一些比较重要的来说吧。现在的公司说实话还确实没有让我失望，工位上]]>
    </summary>
    
      <category term="Life" scheme="http://moelove.info/tags/Life/"/>
    
      <category term="Life" scheme="http://moelove.info/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则匹配中文及字符编码问题]]></title>
    <link href="http://moelove.info/2014/07/22/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E4%B8%AD%E6%96%87%E5%8F%8A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://moelove.info/2014/07/22/正则匹配中文及字符编码问题/</id>
    <published>2014-07-22T13:16:34.000Z</published>
    <updated>2014-10-15T13:30:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="匹配中文的正则表达式">匹配中文的正则表达式</h2>
<p>窝写了一小段<a href="http://moelove.qiniudn.com/regex-match-Chinese.py" target="_blank" rel="external">代码</a>（虽然写的不太好，但是基本可以表达意思）</p>
<script src="https://gist.github.com/tao12345666333/13edb463b04da758dade.js"></script>

<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">nickname = raw_input(<span class="string">'Please input your nickname &gt; '</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">u'^[\u4e00-\u9fa5a-zA-Z0-9]+$'</span>, unicode(nickname,<span class="string">'utf8'</span>)):</div><div class="line">    <span class="keyword">print</span> <span class="string">'Your nickname format is error, please try again !'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Hello %s'</span>% nickname</div></pre></td></tr></table></figure>

<p>如你所见，上面第5行的代码，就是匹配中文和字母，数字的正则表达式了。里面的<code>\u4e00-\u9fa5</code> 就是中文汉字的<code>unicode</code>编码所在位置。</p>
<p><img src="http://moelove.qiniudn.com/2014-07-23%2023:21.png" alt="运行截图"></p>
<hr>
<h2 id="Python字符串的编码问题">Python字符串的编码问题</h2>
<p>还是以上面那段代码来说。注意看第5行的代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">u'^[\u4e00-\u9fa5a-zA-Z0-9]+$'</span>, unicode(nickname,<span class="string">'utf8'</span>)):</div></pre></td></tr></table></figure>

<p>其实这样的代码并不严谨。因为在Python 中默认是用<code>unicode</code>编码来处理字符串的，因此做编码转换的时候，一般要以<code>unicode</code>作为中间编码，也就是说：<br>其他编码格式的字符串—-&gt;解码(decode)—-&gt;<code>unicode</code>—-&gt;编码(encode)—-&gt;所需要的编码格式。</p>
<p>因此，处理字符串编码的问题的时候，先要明白需要转换的字符串的编码格式是什么。</p>
<h3 id="代码中字符串的默认编码格式与代码文件本身的编码格式是一样的">代码中字符串的默认编码格式与代码文件本身的编码格式是一样的</h3>
<p>比如： s = ‘涛’ 在utf8的文件中，那么s就是utf8编码的，但是如果文件是gb2312编码，那么s就是gb2312编码的。此时，如果想要处理s这个字符串就要先decode成unicode编码了。</p>
<p>不过如果是酱紫 s = u’涛’，那么s就是unicode编码了，这个时候s的编码方式不会被文件的编码所影响。</p>
<h3 id="如果一个字符串已经是unicode编码了，再解码就会出错">如果一个字符串已经是unicode编码了，再解码就会出错</h3>
<p>因此严谨的方式就是先对字符串进行编码格式的判别，最简单的办法就是使用Python 默认提供的<code>isinstance()</code> 方法.</p>
<p>代码可以这样写<br><code>isinstance(s, unicode)</code> 如果不是unicode编码就会报错。</p>
<p>窝今天在处理用户昵称的地方，忘记字符串会直接使用文件的编码了，所以对它进行了重新编码orz果断就报错了。。。以后还是要好好注意细节的说。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="匹配中文的正则表达式">匹配中文的正则表达式</h2>
<p>窝写了一小段<a href="http://moelove.qiniudn.com/regex-match-Chinese.py" target="_blank" rel="external">代码</]]>
    </summary>
    
      <category term="Regex" scheme="http://moelove.info/tags/Regex/"/>
    
      <category term="Python" scheme="http://moelove.info/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bash 显示git分支]]></title>
    <link href="http://moelove.info/2014/07/17/Bash-%E6%98%BE%E7%A4%BAgit%E5%88%86%E6%94%AF/"/>
    <id>http://moelove.info/2014/07/17/Bash-显示git分支/</id>
    <published>2014-07-17T13:54:33.000Z</published>
    <updated>2014-10-15T13:55:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="虽然一直都在用git，但是并没有注意到还有这个方便的用法">虽然一直都在用git，但是并没有注意到还有这个方便的用法</h3>
<p>于是乎赶快学习一下 ：-）</p>
<p>上网查了一下资料，都说Ubuntu下如何如何方便，其他的发行版需要先下载一个文件，然后添加source，再如何如何。。</p>
<p>其实查再多都不如实践。以下是窝经过查资料加上对个人bash的配色后写出的配置文件，加入到 <code>~/.bashrc</code> 中即可（对各个发行版通用的）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function git_branch {</div><div class="line">    <span class="keyword">ref</span>=$(git symbolic-<span class="keyword">ref</span> <span class="type">HEAD</span> <span class="number">2</span>&gt; /dev/null) || <span class="keyword">return</span>;</div><div class="line">    echo <span class="string">"("</span>${<span class="keyword">ref</span><span class="comment">#refs/heads/}") ";</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="type">PS1</span>=<span class="string">"[\[\e[1;35m\]\u\[\e[1;32m\]\w\[\e[0m\]] \[\e[0m\]\[\e[1;36m\]\$(git_branch)\[\e[0;33m\]\$"</span></div></pre></td></tr></table></figure>

<script src="https://gist.github.com/tao12345666333/4a81478aa5db7c30e94e.js"></script>

<p>按照惯例，上一张图<br><img src="http://moelove.qiniudn.com/bashrc2014-07%2022:57:55.png" alt="屏幕截图"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="虽然一直都在用git，但是并没有注意到还有这个方便的用法">虽然一直都在用git，但是并没有注意到还有这个方便的用法</h3>
<p>于是乎赶快学习一下 ：-）</p>
<p>上网查了一下资料，都说Ubuntu下如何如何方便，其他的发行版需要先下载一个文件，然后添]]>
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="git" scheme="http://moelove.info/tags/git/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grub2 rescue 修复]]></title>
    <link href="http://moelove.info/2014/07/02/Grub2-rescue-%E4%BF%AE%E5%A4%8D/"/>
    <id>http://moelove.info/2014/07/02/Grub2-rescue-修复/</id>
    <published>2014-07-02T13:53:03.000Z</published>
    <updated>2014-10-15T13:54:15.000Z</updated>
    <content type="html"><![CDATA[<p>昨天下午的时候想要把分区处理一下，突然发现硬盘里面有一个未使用的102M的分区,很果断的把这些乱七八糟的分区都给干掉了。结果呢，再次开机的时候就坑了（虽然酱紫的事情干过很多次了，这次做个记录吧）开机时提示如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">GRUB</span> loading..</div><div class="line">error: unknown filesystem.</div><div class="line"><span class="variable">Entering</span> rescue mode....</div><div class="line">grub rescue&gt;</div></pre></td></tr></table></figure>

<h3 id="grub_rescue_支持的命令">grub rescue 支持的命令</h3>
<ul>
<li><strong>ls</strong> 查看硬盘的分区情况，如果你已知自己的grub的安装位置（比如我的在<code>(hd0,msdos9)/boot/grub2</code>），那么就直接进行下一步。<br>如果不知道，那就ls每个分区，比如:</li>
</ul>
<figure class="highlight ls"><figcaption><span>(hd0,msdos2)/```,如果正确就会显示里面到内容，直到找到grub</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="subst">**</span>这里一个很关键的地方就是在硬盘位置后应该加入<span class="string">`/`</span><span class="subst">**</span></div><div class="line"></div><div class="line"><span class="subst">*</span> <span class="subst">**</span><span class="built_in">set</span><span class="subst">**</span> 直接输入的话， 可以看到root 和 prefix 的设置。这里需要把这两个选项改成我们已经找到的位置。</div><div class="line">窝的设置如下</div></pre></td></tr></table></figure>

<p>grub rescue&gt; set<br>grub rescue&gt; prefix=(hd0,msdos9)/boot/grub2<br>grub rescue&gt; root=hd0,msdos9</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">*</span> <span class="keyword">*</span><span class="keyword">*</span>insmod<span class="keyword">*</span><span class="keyword">*</span> 载入模块。这里区别是窝这次记录的关键。</div><div class="line">grub2和grub的一个很重要的区别就是模块的位置。grub2的模块位置在`/boot/grub2/i386-pc/normal.mod`</div><div class="line">执行命令：</div></pre></td></tr></table></figure>

<p>grub rescue&gt;insmod (hd0,msdos9)/boot/grub2/i386-pc/normal.mod</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">执行成功之后，提示符会变成`normal`</div><div class="line"></div><div class="line"><span class="keyword">*</span> <span class="keyword">*</span><span class="keyword">*</span>normal<span class="keyword">*</span><span class="keyword">*</span> 进入正常模式，直接输入命令即可</div></pre></td></tr></table></figure>

<p>grub rescue&gt;normal</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">这个时候，就可以看到熟悉的引导界面了。</div><div class="line"></div><div class="line"><span class="keyword">*</span> <span class="keyword">*</span><span class="keyword">*</span>grub2-install<span class="keyword">*</span><span class="keyword">*</span></div><div class="line">进入系统后执行命令</div></pre></td></tr></table></figure>

<p>$ sudo update-grub<br>$ sudo grub2-install /dev/sda<br>```</p>
<p>如果不执行这样的命令的话，重启之后还会回到之前的界面orz</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天下午的时候想要把分区处理一下，突然发现硬盘里面有一个未使用的102M的分区,很果断的把这些乱七八糟的分区都给干掉了。结果呢，再次开机的时候就坑了（虽然酱紫的事情干过很多次了，这次做个记录吧）开机时提示如下：</p>
<figure class="highlight"><]]>
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="grub2" scheme="http://moelove.info/tags/grub2/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux中Sublime中文输入]]></title>
    <link href="http://moelove.info/2014/06/19/Linux%E4%B8%ADSublime%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"/>
    <id>http://moelove.info/2014/06/19/Linux中Sublime中文输入/</id>
    <published>2014-06-19T15:17:31.000Z</published>
    <updated>2014-10-19T15:48:16.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这篇只是为了备忘所以把以前写的东西搬这边了 -.-</p>
</blockquote>
<h5 id="代码源于网络，感谢分享">代码源于网络，感谢分享</h5>
<a id="more"></a><br>这里的关键就是以下的代码和编译<br><a id="more"></a>

<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">sublime-imfix.c</div><div class="line">Use LD_PRELOAD to interpose some function to fix sublime input method support for linux.</div><div class="line">By Cjacker Huang &lt;jianzhong.huang at i-soft.com.cn&gt;</div><div class="line"></div><div class="line">gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC</div><div class="line">LD_PRELOAD=./libsublime-imfix.so sublime_text</div><div class="line">*/</div><div class="line">#include &lt;gtk/gtk.h&gt;</div><div class="line">#include &lt;gdk/gdkx.h&gt;</div><div class="line">typedef GdkSegment GdkRegionBox;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> <span class="number">_</span>GdkRegion</div><div class="line">{</div><div class="line">  long size;</div><div class="line">  long numRects;</div><div class="line">  GdkRegionBox *rects;</div><div class="line">  GdkRegionBox extents;</div><div class="line">};</div><div class="line"></div><div class="line">GtkIMContext *local_context;</div><div class="line"></div><div class="line">void</div><div class="line">gdk_region_get_clipbox (<span class="keyword">const</span> GdkRegion *region,</div><div class="line">            GdkRectangle    *rectangle)</div><div class="line">{</div><div class="line">  g_return_if_fail (region != NULL);</div><div class="line">  g_return_if_fail (rectangle != NULL);</div><div class="line">  </div><div class="line">  rectangle-&gt;x = region-&gt;extents.x1;</div><div class="line">  rectangle-&gt;y = region-&gt;extents.y1;</div><div class="line">  rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1;</div><div class="line">  rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1;</div><div class="line">  GdkRectangle rect;</div><div class="line">  rect.x = rectangle-&gt;x;</div><div class="line">  rect.y = rectangle-&gt;y;</div><div class="line">  rect.width = <span class="number">0</span>;</div><div class="line">  rect.height = rectangle-&gt;height; </div><div class="line">  <span class="comment">//The caret width is 2; </span></div><div class="line">  <span class="comment">//Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.</span></div><div class="line">  <span class="keyword">if</span>(rectangle-&gt;width == <span class="number">2</span> && GTK_IS_IM_CONTEXT(local_context)) {</div><div class="line">        gtk_im_context_set_cursor_location(local_context, rectangle);</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//this is needed, for example, if you input something in file dialog and return back the edit area</span></div><div class="line"><span class="comment">//context will lost, so here we set it again.</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)</div><div class="line">{</div><div class="line">    XEvent *xev = (XEvent *)xevent;</div><div class="line">    <span class="keyword">if</span>(xev-&gt;<span class="keyword">type</span> == KeyRelease && GTK_IS_IM_CONTEXT(im_context)) {</div><div class="line">       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),<span class="string">"window"</span>);</div><div class="line">       <span class="keyword">if</span>(GDK_IS_WINDOW(win))</div><div class="line">         gtk_im_context_set_client_window(im_context, win);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> GDK_FILTER_CONTINUE;</div><div class="line">}</div><div class="line"></div><div class="line">void gtk_im_context_set_client_window (GtkIMContext *context,</div><div class="line">          GdkWindow    *window)</div><div class="line">{</div><div class="line">  GtkIMContextClass *klass;</div><div class="line">  g_return_if_fail (GTK_IS_IM_CONTEXT (context));</div><div class="line">  klass = GTK_IM_CONTEXT_GET_CLASS (context);</div><div class="line">  <span class="keyword">if</span> (klass-&gt;set_client_window)</div><div class="line">    klass-&gt;set_client_window (context, window);</div><div class="line">    </div><div class="line">  <span class="keyword">if</span>(!GDK_IS_WINDOW (window))</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  g_object_set_data(G_OBJECT(context),<span class="string">"window"</span>,window);</div><div class="line">  <span class="keyword">int</span> width = gdk_window_get_width(window);</div><div class="line">  <span class="keyword">int</span> height = gdk_window_get_height(window);</div><div class="line">  <span class="keyword">if</span>(width != <span class="number">0</span> && height !=<span class="number">0</span>) {</div><div class="line">    gtk_im_context_focus_in(context);</div><div class="line">    local_context = context;</div><div class="line">  }</div><div class="line">  gdk_window_add_filter (window, event_filter, context); </div><div class="line">}</div></pre></td></tr></table></figure>

<p>这段代码是要写入 sublime_imfix.c中的，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt/sublime_text</div><div class="line"><span class="built_in">sudo</span> touch sublime_imfix.c</div><div class="line"><span class="built_in">sudo</span> vi sublime_imfix.c</div><div class="line"></div><div class="line"><span class="comment">#以下要安装的是必须的，否则编译会报错的</span></div><div class="line"></div><div class="line"><span class="built_in">sudo</span> apt-get install build-essential libgtk2.<span class="number">0</span>-dev</div><div class="line"><span class="built_in">sudo</span> gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-<span class="number">2.0</span>` <span class="operator">-f</span>PIC</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这篇只是为了备忘所以把以前写的东西搬这边了 -.-</p>
</blockquote>
<h5 id="代码源于网络，感谢分享">代码源于网络，感谢分享</h5>
<!-- more --><br>这里的关键就是以下的代码和编译<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="Sublime Text" scheme="http://moelove.info/tags/Sublime-Text/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[upyun-for-pelican]]></title>
    <link href="http://moelove.info/2014/05/16/upyun-for-pelican/"/>
    <id>http://moelove.info/2014/05/16/upyun-for-pelican/</id>
    <published>2014-05-16T13:51:41.000Z</published>
    <updated>2014-10-15T13:52:43.000Z</updated>
    <content type="html"><![CDATA[<p>这几天写了一个插件，方便把pelican生成静态博客部署到又拍云上。<br>整体思路就是：</p>
<ul>
<li>先格式化路径，以/为根目录</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatPath</span><span class="params">(path)</span>:</span></div><div class="line">path = path.replace(os.sep, <span class="string">'/'</span>)</div><div class="line"><span class="keyword">return</span> path</div></pre></td></tr></table></figure>

<ul>
<li>定义两个列表来存储文件和目录</li>
</ul>
<p>之后就是验证用户，以及bucketname 之类的了。</p>
<h3 id="简介">简介</h3>
<p><a href="https://github.com/getpelican/pelican" target="_blank" rel="external">pelican</a> 是一款基于python的静态博客生成工具，本程序可以方便的把生成的静态博客部署到<a href="https://www.upyun.com/index.html" target="_blank" rel="external">又拍云</a>上。演示地址：<a href="http://pelican-for-upyun.b0.upaiyun.com/" target="_blank" rel="external">upyun-for-pelican </a></p>
<h3 id="生成网站">生成网站</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">make</span> html</div><div class="line"></div><div class="line"><span class="keyword">make</span> serve   (进行本地预览)</div></pre></td></tr></table></figure>

<h3 id="说明">说明</h3>
<ul>
<li>程序使用了又拍云的<a href="https://github.com/upyun/python-sdk" target="_blank" rel="external">官方SDK</a> 需要先安装 upyun</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="operator"><span class="keyword">install</span> upyun</span></div></pre></td></tr></table></figure>

<ul>
<li>可以自定义要上传的文件目录。在最下方的<code>local_dir</code> 中指定即可。Pelican默认的上传目录是 output 目录</li>
</ul>
<h3 id="使用">使用</h3>
<ol>
<li><p>可以在 <strong>pelicanconf.py</strong> 文件中直接设置 <code>BUCKETNAME, USERNAME, PASSWORD</code> 参数（这些参数的使用大写命名格式也是为了符合<em>pelicanconf.py</em>中的习惯），也可以直接在 <code>upyun-for-pelican.py</code>文件的最下方直接设置。</p>
</li>
<li><p>执行</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> upyun-<span class="keyword">for</span>-pelican.<span class="keyword">py</span></div></pre></td></tr></table></figure>

<ol>
<li>程序在 <code>Python 2.7</code> 环境下测试通过。</li>
</ol>
<h4 id="其他说明">其他说明</h4>
<ul>
<li>程序执行开始会有上传确认提示，输入<code>Y / y</code> 都可以继续上传。</li>
<li>可以使用项目中的<code>pelicanconf.py</code>作为个人站点的配置文件。</li>
</ul>
<h4 id="未完待续…">未完待续…</h4>
]]></content>
    <summary type="html">
    <![CDATA[<p>这几天写了一个插件，方便把pelican生成静态博客部署到又拍云上。<br>整体思路就是：</p>
<ul>
<li>先格式化路径，以/为根目录</li>
</ul>
<figure class="highlight"><table><tr><td class="gutte]]>
    </summary>
    
      <category term="Pelican" scheme="http://moelove.info/tags/Pelican/"/>
    
      <category term="upyun" scheme="http://moelove.info/tags/upyun/"/>
    
      <category term="Python" scheme="http://moelove.info/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Pelican搭建Blog]]></title>
    <link href="http://moelove.info/2014/05/07/%E4%BD%BF%E7%94%A8Pelican%E6%90%AD%E5%BB%BABlog/"/>
    <id>http://moelove.info/2014/05/07/使用Pelican搭建Blog/</id>
    <published>2014-05-07T13:48:59.000Z</published>
    <updated>2014-10-15T13:50:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装配置Pelican">安装配置Pelican</h2>
<hr>
<h5 id="使用环境：">使用环境：</h5>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">系统  :  Linux X86_64</div><div class="line">Pelican : 3.3.0</div></pre></td></tr></table></figure>

<p>首先说一下安装： 网上有不少建议说使用虚拟环境  <a href="https://virtualenv.pypa.io/en/latest/virtualenv.html" target="_blank" rel="external">virtualenv</a>，以免污染本地的环境。不过，如果不是去更改<code>Python</code>的全局设置的话，也不至于影响本地环境的。我是直接安装的。根据 Pelican 官方的文档，我是使用 <code>pip</code> 安装的，不过<code>pip</code>又是依赖于<code>distribute</code> 安装的。所以，我使用的命令如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -<span class="constant">O</span> <span class="symbol">http:</span>/<span class="regexp">/python-distribute.org/distribute</span>_setup.py</div><div class="line">sudo python distribute_setup.py</div><div class="line"></div><div class="line">curl -<span class="constant">O</span> <span class="symbol">https:</span>/<span class="regexp">/raw.github.com/pypa</span><span class="regexp">/pip/master</span><span class="regexp">/contrib/get</span>-pip.py</div><div class="line">sudo python get-pip.py</div><div class="line"></div><div class="line">sudo pip install pelican</div></pre></td></tr></table></figure>

<p>还有，如果要用 <a href="http://zh.wikipedia.org/zh-cn/Markdown" target="_blank" rel="external"><code>Markdown</code></a>来写文章，也需要执行如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="operator"><span class="keyword">install</span> markdown</span></div></pre></td></tr></table></figure>

<p>新建一个目录，用来存放你的博客文件（我直接建立了”blog”文件夹）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> blog</div><div class="line"></div><div class="line"><span class="keyword">cd</span> blog</div></pre></td></tr></table></figure>

<hr>
<h2 id="新建博客：">新建博客：</h2>
<p>使用如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pelican-quickstart</div></pre></td></tr></table></figure>

<p>按照提示一步步即可完成新建， 这些配置之后可以在<code>pelicanconf.py</code>这个文件中修改</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Where</span> <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">create</span> your <span class="keyword">new</span> web site?[.]  (你想在哪里创建你的网站，默认为当前目录)</div><div class="line">What will be the title <span class="keyword">of</span> this web site?(网站的标题是什么)</div><div class="line">Who will be the author <span class="keyword">of</span> this web site?(网站的作者是谁)</div><div class="line">What will be the <span class="keyword">default</span> language <span class="keyword">of</span> this web site? [en]   (网站的默认语言是),这里我们写<span class="string">'zh'</span>中文</div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> specify a URL prefix? e.g., http:<span class="comment">//example.com(Y/n) (是否指定域名),Y</span></div><div class="line">What <span class="keyword">is</span> your URL prefix?(see above example; no trailing slash)(输入域名，不能包含反斜杠<span class="string">'/'</span>),http:<span class="comment">//moelove.info</span></div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> enable article pagination?(是否启用文章分页)</div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> generate a Makefile <span class="keyword">to</span> easily manage your website?(是否生成一个Makefile来管理网站(这里我建议生成，因为会比较方便的))</div><div class="line"><span class="keyword">Do</span> you want an auto-reload & simpleHTTP script <span class="keyword">to</span> assist <span class="keyword">with</span> theme <span class="keyword">and</span> site development?(是否想有一个自动加载的小型http脚本用来修改主题和站点开发)</div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> upload your website <span class="keyword">using</span> FTP?</div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> upload your website <span class="keyword">using</span> SSH?</div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> upload your website <span class="keyword">using</span> Dropbox?</div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> upload your website <span class="keyword">using</span> S3?</div></pre></td></tr></table></figure>

<hr>
<h2 id="新建博文：">新建博文：</h2>
<p>这个时候就可以写博客了。具体的写作方式可以参考 <a href="http://docs.getpelican.com/en/latest/internals.html" target="_blank" rel="external">Pelican的官方文档</a><br>  我以<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown</a> 为例说明一下。</p>
<p>在content 目录，新建一个 <code>hello.md</code>文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vim content/htllo.md</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="label">Date:</span> <span class="number">2014</span>-<span class="number">04</span>-<span class="number">18</span> <span class="preprocessor">#日期</span></div><div class="line"><span class="label">Title:</span> HelloWorld <span class="preprocessor">#标题</span></div><div class="line"><span class="label">Tags:</span> hello <span class="preprocessor">#标签</span></div><div class="line"><span class="label">Category:</span> test <span class="preprocessor">#分类</span></div><div class="line">Hello World !</div></pre></td></tr></table></figure>

<p>之后，执行<code>make html</code> 或者 <code>pelican content</code>即可将 md文件转换成html文件。执行 <code>make serve</code>   即可打开本地浏览器，<a href="http://127.0.0.1:8000/" target="_blank" rel="external">预览</a>。</p>
<blockquote>
<p><strong>现在一个使用默认主题的博客就建立好了。</strong></p>
</blockquote>
<hr>
<h2 id="后续">后续</h2>
<h4 id="接下来说一下修改主题和使用插件的方法">接下来说一下修改主题和使用插件的方法</h4>
<p>Pelican 默认提供了很多主题可以 github 上下载，当然也可以自己制作。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/getpelican/pelican-themes.git</div></pre></td></tr></table></figure>

<p>在里面找到你喜欢的主题，使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pelican-theme -i <span class="regexp">/path/</span>to<span class="regexp">/your/</span>themes</div></pre></td></tr></table></figure>

<p>命令进行主题的安装。</p>
<p>随后可以使用<code>pelican-themes -l -v</code> 查看已经安装好的主题。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="keyword">lib</span>/python2<span class="number">.7</span>/site-packages/pelican/themes/simple</div><div class="line">/usr/<span class="keyword">lib</span>/python2<span class="number">.7</span>/site-packages/pelican/themes/notmyidea</div><div class="line">/usr/<span class="keyword">lib</span>/python2<span class="number">.7</span>/site-packages/pelican/themes/bootstrap2</div></pre></td></tr></table></figure>

<p>想要开始使用主题的话， 只需要在<code>pelicanconf.py</code>文件中添加 <code>THEME</code>项为主题名,例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">THEME</span> = <span class="string">"bootstrap2"</span></div></pre></td></tr></table></figure>

<p>重新 <em>make html</em>  即可, 这时候声成的页面就是所要使用的主题了。</p>
<h4 id="为博客使用插件">为博客使用插件</h4>
<p>Pelican 也提供了不少的插件来方便使用， 可以从github 上面下载到博客所在目录：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/getpelican/pelican-plugins.git</div></pre></td></tr></table></figure>

<p>现在博客目录就新添了一个 pelican-plugins 目录，接下来在 pelicanconf.py 里面添加配置即可(里面是我最开始使用的三个插件):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PLUGIN_PATH = <span class="string">u"pelican-plugins"</span></div><div class="line">PLUGINS = [<span class="string">"sitemap"</span>, <span class="string">"summary"</span>, <span class="string">"neighbors"</span>]</div></pre></td></tr></table></figure>

<p>再添加 sitemap 的配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">SITEMAP = {</div><div class="line"><span class="string">'format'</span>: <span class="string">'xml'</span>,</div><div class="line"><span class="string">'priorities'</span>: {</div><div class="line">    <span class="string">'articles'</span>: <span class="number">0.5</span>,</div><div class="line">    <span class="string">'indexes'</span>: <span class="number">0.5</span>,</div><div class="line">    <span class="string">'pages'</span>: <span class="number">0.5</span></div><div class="line">    },</div><div class="line"><span class="string">'changefreqs'</span>: {</div><div class="line">    <span class="string">'articles'</span>: <span class="string">'weekly'</span>,</div><div class="line">    <span class="string">'indexes'</span>: <span class="string">'daily'</span>,</div><div class="line">    <span class="string">'pages'</span>: <span class="string">'monthly'</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后执行 <em>make html</em> 即可</p>
<h4 id="添加多说评论">添加多说评论</h4>
<p>一开始搭建静态博客的时候，使用的<a href="http://disqus.com/" target="_blank" rel="external">disqus</a> 并且Pelican 的主题中默认提供了支持，只要在 pelicanconf.py 的里面加入 disqus 的short_name 即可开始使用了。不过，身在天朝，还是尽量本地化一些吧，使用<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>评论插件。<br>在<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>注册一个帐号，<a href="http://duoshuo.com/create-site/" target="_blank" rel="external">添加一个站点</a>，获取自己的 <em>short_name</em> ，点击工具一栏—&gt;获取代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 多说评论框 start --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ds-thread"</span> <span class="attribute">data-thread-key</span>=<span class="value">"请将此处替换成文章在你的站点中的ID"</span> <span class="attribute">data-title</span>=<span class="value">"请替换成文章的标题"</span> <span class="attribute">data-url</span>=<span class="value">"请替换成文章的网址"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说评论框 end --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> duoshuoQuery = {short_name:<span class="string">"替换成你自己的"</span>};</div><div class="line">    (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">        ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">        ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</div><div class="line">        ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</div><div class="line">         || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">    })();</div><div class="line">    <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></div></pre></td></tr></table></figure>

<p>把这段代码放在你想要显示评论的地方就可以了。建议直接修改放在article.html模板里面。</p>
<h4 id="添加其他功能">添加其他功能</h4>
<p>这里我还加入了<a href="http://share.baidu.com/code" target="_blank" rel="external">百度分享</a>的功能。直接定制个人想要的代码， 放在你需要出现分享按钮的地方即可，我放在了文章的下面。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"bdsharebuttonbox"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"bds_more"</span> <span class="attribute">data-cmd</span>=<span class="value">"more"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"bds_qzone"</span> <span class="attribute">data-cmd</span>=<span class="value">"qzone"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"bds_tsina"</span> <span class="attribute">data-cmd</span>=<span class="value">"tsina"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"bds_tqq"</span> <span class="attribute">data-cmd</span>=<span class="value">"tqq"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"bds_renren"</span> <span class="attribute">data-cmd</span>=<span class="value">"renren"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"bds_weixin"</span> <span class="attribute">data-cmd</span>=<span class="value">"weixin"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>._bd_share_config={<span class="string">"common"</span>:{<span class="string">"bdSnsKey"</span>:{},<span class="string">"bdText"</span>:<span class="string">""</span>,<span class="string">"bdMini"</span>:<span class="string">"2"</span>,<span class="string">"bdPic"</span>:<span class="string">""</span>,<span class="string">"bdStyle"</span>:<span class="string">"0"</span>,<span class="string">"bdSize"</span>:<span class="string">"16"</span>},<span class="string">"share"</span>:{},<span class="string">"image"</span>:{<span class="string">"viewList"</span>:[<span class="string">"qzone"</span>,<span class="string">"tsina"</span>,<span class="string">"tqq"</span>,<span class="string">"renren"</span>,<span class="string">"weixin"</span>],<span class="string">"viewText"</span>:<span class="string">"分享到："</span>,<span class="string">"viewSize"</span>:<span class="string">"16"</span>},<span class="string">"selectShare"</span>:{<span class="string">"bdContainerClass"</span>:<span class="literal">null</span>,<span class="string">"bdSelectMiniList"</span>:[<span class="string">"qzone"</span>,<span class="string">"tsina"</span>,<span class="string">"tqq"</span>,<span class="string">"renren"</span>,<span class="string">"weixin"</span>]}};<span class="keyword">with</span>(<span class="built_in">document</span>)<span class="number">0</span>[(getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]||body).appendChild(createElement(<span class="string">'script'</span>)).src=<span class="string">'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='</span>+~(-<span class="keyword">new</span> <span class="built_in">Date</span>()/<span class="number">36e5</span>)];</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>还有加入了 <a href="http://www.google.com/analytics/" target="_blank" rel="external">Google Analytics</a> 谷歌站内搜索 以及七牛提供的云存储 等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装配置Pelican">安装配置Pelican</h2>
<hr>
<h5 id="使用环境：">使用环境：</h5>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class]]>
    </summary>
    
      <category term="Pelican" scheme="http://moelove.info/tags/Pelican/"/>
    
      <category term="Blog" scheme="http://moelove.info/tags/Blog/"/>
    
      <category term="Web" scheme="http://moelove.info/tags/Web/"/>
    
      <category term="Web" scheme="http://moelove.info/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World !]]></title>
    <link href="http://moelove.info/2014/04/18/Hello-World/"/>
    <id>http://moelove.info/2014/04/18/Hello-World/</id>
    <published>2014-04-18T13:46:06.000Z</published>
    <updated>2014-10-15T13:47:30.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>几乎所有的程序猿的第一个演示程序都是Hello World .那我也就一样咯， 也写一个同样的吧。<br>其实我的博客从很早前就已经开始在写了， 换了很多的平台：</p>
</blockquote>
<pre><code><span class="comment">从腾讯空间</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">百度空间</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">新浪博客</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">自己搭建的Wordpress博客</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">点点（点点我其实是用来碎碎念的）</span>
<span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">博客园（个人感觉体验不是很好的说）</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">静态博客</span>
</code></pre><p>选择了这么多，我最后决定还是使用 <strong>静态博客</strong> 来做个人博客。</p>
<blockquote>
<p>原因有以下几个：</p>
</blockquote>
<ol>
<li>使用其他平台提供的博客不是很爽， 可个性化的方面不是很多， 点点相对来说做的还是很不错的<br>不仅提供个性化定制而且还支持绑定个人域名之类的。但是其他网站就不是那么人性化了。</li>
<li>写博客总是需要贴代码的，但是除了WP外，其他的我不是很满意。</li>
<li>用静态博客方便备份，而且是本地编辑就可以了，在线编辑的，感觉会被束缚很多。</li>
<li>本人属于折腾党，喜欢可以个人定制的， 直到符合个人满意的程度为止。</li>
</ol>
<blockquote>
<p>接下来说说这次博客的安装：</p>
</blockquote>
<ol>
<li>选择<strong>Pelica</strong>是因为我对Python 比较熟悉，之前尝试过用Jekyll 和 Octopress 搭建，都比较方便<br>尤其是Jekyll 用户很多，文档什么的都很多了。只不过我更喜欢Python 多一些（虽然我有用ROR开发过WEB应用程序）<br>因为如果有什么需要的话，我也可以自己来开发插件或者自己再尝试做一个系统。</li>
<li>Pelican 相对来说配置也很方便， 很简单， 虽然用户不是很多，但是基本上的问题也都可以解决的</li>
<li><a href="https://github.com/getpelican/pelican" target="_blank" rel="external">Pelican</a> 支持restructuredText和Markdown写文章，配置灵活，扩展性强。我用的是3.3.0。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>几乎所有的程序猿的第一个演示程序都是Hello World .那我也就一样咯， 也写一个同样的吧。<br>其实我的博客从很早前就已经开始在写了， 换了很多的平台：</p>
</blockquote>
<pre><code><span class="]]>
    </summary>
    
      <category term="Pelican" scheme="http://moelove.info/tags/Pelican/"/>
    
      <category term="Blog" scheme="http://moelove.info/tags/Blog/"/>
    
      <category term="Web" scheme="http://moelove.info/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux 安装Android 驱动]]></title>
    <link href="http://moelove.info/2014/03/10/Linux-%E5%AE%89%E8%A3%85Android-%E9%A9%B1%E5%8A%A8/"/>
    <id>http://moelove.info/2014/03/10/Linux-安装Android-驱动/</id>
    <published>2014-03-10T13:44:06.000Z</published>
    <updated>2014-10-15T13:45:39.000Z</updated>
    <content type="html"><![CDATA[<p>在Linux下非常适合做一些对Rom 的定制以及其他的一些操作，甚至是自己制作Rom 或者从源码编译Rom 也是OK的。</p>
<p>不过最开始的应该就是搭建开发环境了，我先从装驱动开始说（只是做个笔记而已）</p>
<ul>
<li><p>使用数据线连接手机，打开<strong>adb调试模式</strong>。(在Linux上搭建开发环境， 以及adb 命令之类的， 就自行搜索吧，如果哪天更新了 我会附上链接的)</p>
</li>
<li><p>输入<code>adb devices</code> 查看设备<br>如果有机型的话就说明是已经有驱动了<br>如果没有显示的话， 就是说明需要进行驱动安装了。</p>
</li>
</ul>
<p>这个时候， <code>lsusb</code> 查看， 会看到下面这样的信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr_selector">[tao@localhost ~]</span>$ <span class="tag">lsusb</span></div><div class="line"><span class="tag">Bus</span> 001 <span class="tag">Device</span> 002: <span class="tag">ID</span> 8087<span class="pseudo">:0020</span> <span class="tag">Intel</span> <span class="tag">Corp</span>. <span class="tag">Integrated</span> <span class="tag">Rate</span> <span class="tag">Matching</span> <span class="tag">Hub</span></div><div class="line"><span class="tag">Bus</span> 002 <span class="tag">Device</span> 002: <span class="tag">ID</span> 8087<span class="pseudo">:0020</span> <span class="tag">Intel</span> <span class="tag">Corp</span>. <span class="tag">Integrated</span> <span class="tag">Rate</span> <span class="tag">Matching</span> <span class="tag">Hub</span></div><div class="line"><span class="tag">Bus</span> 001 <span class="tag">Device</span> 001: <span class="tag">ID</span> 1<span class="tag">d6b</span><span class="pseudo">:0002</span> <span class="tag">Linux</span> <span class="tag">Foundation</span> 2<span class="class">.0</span> <span class="tag">root</span> <span class="tag">hub</span></div><div class="line"><span class="tag">Bus</span> 002 <span class="tag">Device</span> 001: <span class="tag">ID</span> 1<span class="tag">d6b</span><span class="pseudo">:0002</span> <span class="tag">Linux</span> <span class="tag">Foundation</span> 2<span class="class">.0</span> <span class="tag">root</span> <span class="tag">hub</span></div><div class="line"><span class="tag">Bus</span> 002 <span class="tag">Device</span> 006: <span class="tag">ID</span> 12<span class="tag">d1</span><span class="pseudo">:2229</span> <span class="tag">Huawei</span> <span class="tag">Technologies</span> <span class="tag">Co</span>., <span class="tag">Ltd</span>.</div><div class="line"><span class="tag">Bus</span> 002 <span class="tag">Device</span> 004: <span class="tag">ID</span> 04<span class="tag">f2</span><span class="pseudo">:b1c1</span> <span class="tag">Chicony</span> <span class="tag">Electronics</span> <span class="tag">Co</span>., <span class="tag">Ltd</span></div><div class="line"><span class="tag">Bus</span> 002 <span class="tag">Device</span> 005: <span class="tag">ID</span> 062<span class="tag">a</span><span class="pseudo">:4101</span> <span class="tag">Creative</span> <span class="tag">Labs</span></div></pre></td></tr></table></figure>

<p>可以在<a href="https://developer.android.com/tools/device.html" target="_blank" rel="external">Android Developer</a> ， 看到对其他的产品的支持，窝的手机是Huawei的所以就是要输入对应的ID ：<strong>12d1</strong> 然后，再新建一个文件，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /etc/udev/rules.d/<span class="number">50</span>-android.rules</div><div class="line"></div><div class="line">写入内容：</div><div class="line"></div><div class="line"><span class="variable">SUBSYSTEM=</span>=<span class="string">"usb"</span>, ATTR{idVendor}==<span class="string">"12d1"</span>, ATTR{idProduct}==<span class="string">"2229"</span>, <span class="variable">MODE=</span><span class="string">"0600"</span>, <span class="variable">OWNER=</span><span class="string">"tao"</span>,<span class="variable">GROUP =</span><span class="string">"plugdev"</span></div></pre></td></tr></table></figure>

<p>50是说是手机， 其他的命名也有各自的解释</p>
<p>然后我们就可以新建这个文件， 修改权限</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+x <span class="regexp">/etc/</span>udev<span class="regexp">/rules.d/</span><span class="number">50</span>-android.rules</div></pre></td></tr></table></figure>

<p>这个时候 就成功了，我们使用<code>adb devices</code> 命令就可以看到我们的设备了， 使用<code>adb shell</code>  就可以对手机进行操作了</p>
<p>当然我在这里进行了一次重启，就可以使用了<br>(话说这篇文章虽然一直在云端编辑，但是一直木有结束，现在才发出来。。一定要提高效率！)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Linux下非常适合做一些对Rom 的定制以及其他的一些操作，甚至是自己制作Rom 或者从源码编译Rom 也是OK的。</p>
<p>不过最开始的应该就是搭建开发环境了，我先从装驱动开始说（只是做个笔记而已）</p>
<ul>
<li><p>使用数据线连接手机，打开<st]]>
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="Android" scheme="http://moelove.info/tags/Android/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fedora 18 Kernel driver not installed (rc=-1908)处理办法]]></title>
    <link href="http://moelove.info/2013/12/21/fedora-18-Kernel-driver-not-installed-rc-1908-%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/"/>
    <id>http://moelove.info/2013/12/21/fedora-18-Kernel-driver-not-installed-rc-1908-处理办法/</id>
    <published>2013-12-21T13:42:18.000Z</published>
    <updated>2014-10-15T13:43:35.000Z</updated>
    <content type="html"><![CDATA[<h4 id="fedora_18_升级内核之后_使用VirtualBox_可以正常打开软件,但是不能启动虚拟机系统-提示信息如下:">fedora 18 升级内核之后 使用<em>VirtualBox</em> 可以正常打开软件,但是不能启动虚拟机系统.提示信息如下:</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Kernel driver not installed (rc</span>=<span class="string">-1908)</span></div></pre></td></tr></table></figure>

<p>经过一系列的看文档还有google 之后,很多地方写着这个问题的处理方法是</p>
<ul>
<li>第一种</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> /etc/init.d/vboxdrv setup</div></pre></td></tr></table></figure>

<p>经过实验,对feora 18 不可行</p>
<ul>
<li>第二种</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install dkms</div><div class="line"><span class="built_in">sudo</span> /etc/init.d/vboxdrv setup</div></pre></td></tr></table></figure>

<p>但是情况继续</p>
<ul>
<li>第三种</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> aptitude update</div><div class="line"><span class="built_in">sudo</span> aptitude install dkms</div><div class="line"><span class="built_in">sudo</span> /etc/init.d/vboxdrv setup</div></pre></td></tr></table></figure>

<h3 id="最后正确的解决方法应该是酱紫的">最后正确的解决方法应该是酱紫的</h3>
<ul>
<li>先看看系统的内核</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">uname</span> -r</div></pre></td></tr></table></figure>

<ul>
<li>找对应的包</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> yum search kmod-VirtualBox</div></pre></td></tr></table></figure>

<ul>
<li>然后安装和你系统内核对应的包</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> yum install kmod-VirtualBox-XXXX</div></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/etc/</span>sysconfig<span class="regexp">/modules/</span>VirtualBox.modules</div></pre></td></tr></table></figure>

<p>一切OK了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="fedora_18_升级内核之后_使用VirtualBox_可以正常打开软件,但是不能启动虚拟机系统-提示信息如下:">fedora 18 升级内核之后 使用<em>VirtualBox</em> 可以正常打开软件,但是不能启动虚拟机系统.提示信息如下:</h4>]]>
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ruby on Rails 环境]]></title>
    <link href="http://moelove.info/2013/09/21/Ruby-on-Rails-%E7%8E%AF%E5%A2%83/"/>
    <id>http://moelove.info/2013/09/21/Ruby-on-Rails-环境/</id>
    <published>2013-09-21T13:39:55.000Z</published>
    <updated>2014-10-15T13:41:16.000Z</updated>
    <content type="html"><![CDATA[<h4 id="就这次的尝试写一下自己的记录">就这次的尝试写一下自己的记录</h4>
<p>安装ruby  和 ruby-devel(安装ruby-devel是因为后续的工作如果没有ruby-devel的话，会报错)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install <span class="keyword">ruby</span> <span class="keyword">ruby</span>-devel rubygems sqlite -<span class="keyword">y</span></div></pre></td></tr></table></figure>

<p>需要的环境有了，那么就可以开始正式的工作了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> gem install rails</div></pre></td></tr></table></figure>

<p>找到一个合适的目录来放自己的代码.然后执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ rails <span class="keyword">new</span> mysite</div><div class="line"><span class="comment">// 这个是建立一个叫mysite 的rails程式 ，在当前目录下面</span></div><div class="line">$ cd mysite</div><div class="line"><span class="comment">//进入这个目录</span></div><div class="line">$ bundle install</div><div class="line"><span class="comment">//因为在做测试 所以 也没有必要安装其他的gem</span></div></pre></td></tr></table></figure>

<p>接下来看看它的数据库  配置文件是 <code>config/database.yml</code>  默认的支持是是<strong>SQLite3</strong>(当然也支持其他的比如mysql之类的)它有三种模式:</p>
<ul>
<li>development environment开发模式，用在你的开发的时候</li>
<li>test environment测试模式，用在自动测试时</li>
<li>production environment正式上线模式，用在实际的上线运作环境</li>
</ul>
<p>SQLite配置大致是这样的:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="label">development:</span></div><div class="line"><span class="label">adapter:</span> sqlite3</div><div class="line"><span class="label">database:</span> db/development.sqlite3</div><div class="line"><span class="label">pool:</span> <span class="number">5</span></div><div class="line"><span class="label">timeout:</span> <span class="number">5000</span></div></pre></td></tr></table></figure>

<p>接下来建立自己的数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rake <span class="keyword">d</span><span class="variable">b:create</span></div></pre></td></tr></table></figure>

<p><strong>在这里我遇到一个错误</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rake aborted!</div><div class="line">Could <span class="operator">not</span> find <span class="operator">a</span> JavaScript runtime. See <span class="keyword">https</span>://github.com/sstephenson/execjs <span class="keyword">for</span> <span class="operator">a</span> list <span class="operator">of</span> available runtimes.</div><div class="line"></div><div class="line">(See full trace <span class="keyword">by</span> running task <span class="operator">with</span> <span class="comment">--trace)</span></div></pre></td></tr></table></figure>

<p>我的解决办法是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> yum install nodejs</div></pre></td></tr></table></figure>

<p>然后启动服务器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails <span class="keyword">server</span></div></pre></td></tr></table></figure>

<p>要看结果就打开<a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a>就会看见rails 的默认首页了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="就这次的尝试写一下自己的记录">就这次的尝试写一下自己的记录</h4>
<p>安装ruby  和 ruby-devel(安装ruby-devel是因为后续的工作如果没有ruby-devel的话，会报错)</p>
<figure class="highlight">]]>
    </summary>
    
      <category term="Ruby" scheme="http://moelove.info/tags/Ruby/"/>
    
      <category term="Rails" scheme="http://moelove.info/tags/Rails/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用百度BAE搭建discuz论坛]]></title>
    <link href="http://moelove.info/2013/09/06/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6BAE%E6%90%AD%E5%BB%BAdiscuz%E8%AE%BA%E5%9D%9B/"/>
    <id>http://moelove.info/2013/09/06/利用百度BAE搭建discuz论坛/</id>
    <published>2013-09-06T13:38:39.000Z</published>
    <updated>2014-10-15T13:39:33.000Z</updated>
    <content type="html"><![CDATA[<p>最近尝试了利用百度云应用管理<em>BAE</em>搭建discuz论坛， 这里做简要记录</p>
<h3 id="创建应用">创建应用</h3>
<p>在 <a href="http://developer.baidu.com/" target="_blank" rel="external">百度开发者中心</a> 创建一个应用，选择WEB应用下的PC <strong>Iframe应用</strong></p>
<h3 id="托管设置">托管设置</h3>
<p>之后进行托管设置， 确定域名XXX.duapp.com</p>
<p>创建一个版本，并上传PHP代码包</p>
<p>(BAE有些函数规则发生改变，所以需要使用为BAE环境做过调整的<a href="http://pan.baidu.com/s/1hqsYVre" target="_blank" rel="external">discuz for BAE</a> 版本)</p>
<p>需要注意的是在上传的代码包里面的 <em>bcs/config.php</em> 中的内容应该修改为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="subst">&lt;?</span>php</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">'BAIDU_BCS_BUCKET'</span>, <span class="string">'创建的bucket名称'</span>);</div><div class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">'BAIDU_BCS_AK'</span>, getenv(<span class="string">'HTTP_BAE_ENV_AK'</span>));</div><div class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">'BAIDU_BCS_SK'</span>, getenv(<span class="string">'HTTP_BAE_ENV_SK'</span>));</div><div class="line"></div><div class="line"><span class="preprocessor">?&gt;</span><span class="markup"></span></div></pre></td></tr></table></figure>

<p>同时在数据库中设置为UTF-8,</p>
<p>注意开启缓存 cache 最少30M(亲测50M完全是OK的)</p>
<h3 id="安装">安装</h3>
<p>之后上线应用，访问<a href="http://你的域名.duapp.com/install/index.php" target="_blank" rel="external">http://你的域名.duapp.com/install/index.php</a></p>
<p>即可完成安装(需要用到创建的数据库名称)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近尝试了利用百度云应用管理<em>BAE</em>搭建discuz论坛， 这里做简要记录</p>
<h3 id="创建应用">创建应用</h3>
<p>在 <a href="http://developer.baidu.com/" target="_blank" rel=]]>
    </summary>
    
      <category term="BAE" scheme="http://moelove.info/tags/BAE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fedora下安装sublime text 2的方法]]></title>
    <link href="http://moelove.info/2013/08/30/fedora%E4%B8%8B%E5%AE%89%E8%A3%85sublime-text-2%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://moelove.info/2013/08/30/fedora下安装sublime-text-2的方法/</id>
    <published>2013-08-30T13:36:09.000Z</published>
    <updated>2014-10-15T13:37:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="首先去官网下载最新的压缩包">首先去<a href="http://www.sublimetext.com/" target="_blank" rel="external">官网</a>下载最新的压缩包</h3>
<ul>
<li>把文件解压到$HOME/.sublime_text_2文件夹中：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -xf (sublime压缩包的文件名).tar.bz2</div><div class="line"><span class="built_in">sudo</span> mv (解压后的文件夹) tools/Sublime_Text_2</div></pre></td></tr></table></figure>

<ul>
<li>在/usr/bin目录下面创建一个链接</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vim</span> sublime</div></pre></td></tr></table></figure>

<p>在文件中写入这些代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="keyword">export</span> SUBLIME_HOME=<span class="string">"~/tools/Sublime_Text_2"</span></div><div class="line"></div><div class="line"><span class="variable">$SUBLIME_HOME</span>/sublime_text $*</div></pre></td></tr></table></figure>

<p>修改文件权限并且移动</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod <span class="number">555</span> sublime && mv sublime <span class="regexp">/usr/</span>bin<span class="regexp">/sublime</span></div></pre></td></tr></table></figure>

<p>这样就可以在终端中直接执行sublime了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="首先去官网下载最新的压缩包">首先去<a href="http://www.sublimetext.com/" target="_blank" rel="external">官网</a>下载最新的压缩包</h3>
<ul>
<li>把文件解压到$HOME/.sub]]>
    </summary>
    
      <category term="Linux" scheme="http://moelove.info/tags/Linux/"/>
    
      <category term="Sbulime Text" scheme="http://moelove.info/tags/Sbulime-Text/"/>
    
      <category term="Linux" scheme="http://moelove.info/categories/Linux/"/>
    
  </entry>
  
</feed>
