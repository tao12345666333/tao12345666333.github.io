<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio on MoeLove</title><link>https://moelove.info/tags/Istio/</link><description>Recent content in Istio on MoeLove</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 07 Aug 2020 00:19:13 +0800</lastBuildDate><atom:link href="https://moelove.info/tags/Istio/index.xml" rel="self" type="application/rss+xml"/><item><title>初试 Open Service Mesh（OSM）</title><link>https://moelove.info/2020/08/07/%E5%88%9D%E8%AF%95-Open-Service-MeshOSM/</link><pubDate>Fri, 07 Aug 2020 00:19:13 +0800</pubDate><guid>https://moelove.info/2020/08/07/%E5%88%9D%E8%AF%95-Open-Service-MeshOSM/</guid><description>微软近期开源了一个新的名为 Open Service Mesh 的项目并准备捐赠给 CNCF 。
基本介绍 Open Service Mesh (OSM) is a lightweight, extensible, Cloud Native service mesh that allows users to uniformly manage, secure, and get out-of-the-box observability features for highly dynamic microservice environments.
Open Service Mesh（OSM）是一个轻量级，可扩展的云原生服务网格，它使用户能够统一管理，保护和获得针对高度动态微服务环境的开箱即用的可观察性功能。
OSM 在 Kubernetes 上运行基于 Envoy 的控制平面，可以使用 SMI API 进行配置。它通过以 sidecar 的形式注入 Envoy 代理来工作。
控制面负责持续配置代理，以配置策略和路由规则等都保持最新。代理主要负责执行访问控制的规则，路由控制，采集 metrics 等。（这和目前我们常见到的 Service Mesh 方案基本都一样的）
显著特性 基于 Service Mesh Interface (SMI) 的实现，主要包括 Traffic Access Control， Traffic Specs 和 Traffic Split 。剩下的 Traffic Metrics 正在开发中； 服务间的通信加密使用 mTLS ； 定义和执行服务间的访问控制策略； 通过 Prometheus 和 Grafana 完成器观察性； 可与外部证书管理服务进行集成； Envoy sidecar 自动注入； 上手体验 只做介绍未免太过无趣，而且说实话，这么多 service mesh 实现，不亲自上手试试看，感觉不出来太多差异的。</description></item></channel></rss>